/* tslint:disable */
/* eslint-disable */
/**
 * WeHop - Member API
 * WeHop - 회원 API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     * API Error Code
     * @type {string}
     * @memberof ApiError
     */
    'errorCode'?: string;
    /**
     * API Error Message
     * @type {string}
     * @memberof ApiError
     */
    'errorMessage'?: string;
}
/**
 * 
 * @export
 * @interface ApiRes
 */
export interface ApiRes {
    /**
     * 메시지
     * @type {string}
     * @memberof ApiRes
     */
    'message'?: string;
    /**
     * 결과 코드
     * @type {string}
     * @memberof ApiRes
     */
    'resultCode'?: string;
}
/**
 * 
 * @export
 * @interface AuthenticationCommand
 */
export interface AuthenticationCommand {
    /**
     * 비밀번호
     * @type {string}
     * @memberof AuthenticationCommand
     */
    'password'?: string;
    /**
     * 이메일
     * @type {string}
     * @memberof AuthenticationCommand
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ChangePasswordCommand
 */
export interface ChangePasswordCommand {
    /**
     * 이메일
     * @type {string}
     * @memberof ChangePasswordCommand
     */
    'email'?: string;
    /**
     * 비밀번호
     * @type {string}
     * @memberof ChangePasswordCommand
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface CodeOne
 */
export interface CodeOne {
    /**
     * 코드설명
     * @type {string}
     * @memberof CodeOne
     */
    'codeExplanation'?: string;
    /**
     * 코드ID
     * @type {string}
     * @memberof CodeOne
     */
    'codeId'?: string;
    /**
     * 코드명
     * @type {string}
     * @memberof CodeOne
     */
    'codeName'?: string;
    /**
     * 코드값
     * @type {string}
     * @memberof CodeOne
     */
    'codeValue'?: string;
    /**
     * 상위코드ID
     * @type {string}
     * @memberof CodeOne
     */
    'parentCodeId'?: string;
    /**
     * 순서번호
     * @type {number}
     * @memberof CodeOne
     */
    'sortNo'?: number;
    /**
     * 사용여부
     * @type {string}
     * @memberof CodeOne
     */
    'useYn'?: string;
}
/**
 * 
 * @export
 * @interface EmailVerificationCommand
 */
export interface EmailVerificationCommand {
    /**
     * 이메일
     * @type {string}
     * @memberof EmailVerificationCommand
     */
    'email'?: string;
    /**
     * 인증유형
     * @type {string}
     * @memberof EmailVerificationCommand
     */
    'type'?: EmailVerificationCommandTypeEnum;
    /**
     * 인증 번호
     * @type {string}
     * @memberof EmailVerificationCommand
     */
    'verifyNumber'?: string;
}

export const EmailVerificationCommandTypeEnum = {
    ChangePassword: 'CHANGE_PASSWORD',
    Join: 'JOIN'
} as const;

export type EmailVerificationCommandTypeEnum = typeof EmailVerificationCommandTypeEnum[keyof typeof EmailVerificationCommandTypeEnum];

/**
 * 
 * @export
 * @interface EmailVerificationNumberCommand
 */
export interface EmailVerificationNumberCommand {
    /**
     * 이메일
     * @type {string}
     * @memberof EmailVerificationNumberCommand
     */
    'email'?: string;
    /**
     * 인증유형
     * @type {string}
     * @memberof EmailVerificationNumberCommand
     */
    'type'?: EmailVerificationNumberCommandTypeEnum;
}

export const EmailVerificationNumberCommandTypeEnum = {
    ChangeEmail: 'CHANGE_EMAIL',
    ChangePassword: 'CHANGE_PASSWORD',
    Join: 'JOIN'
} as const;

export type EmailVerificationNumberCommandTypeEnum = typeof EmailVerificationNumberCommandTypeEnum[keyof typeof EmailVerificationNumberCommandTypeEnum];

/**
 * 
 * @export
 * @interface FileOne
 */
export interface FileOne {
    /**
     * 컨텐츠유형
     * @type {string}
     * @memberof FileOne
     */
    'contentsType'?: string;
    /**
     * 확장자
     * @type {string}
     * @memberof FileOne
     */
    'extensionName'?: string;
    /**
     * 파일명
     * @type {string}
     * @memberof FileOne
     */
    'fileName'?: string;
    /**
     * 파일사이즈
     * @type {number}
     * @memberof FileOne
     */
    'fileSize'?: number;
    /**
     * S3 Key
     * @type {string}
     * @memberof FileOne
     */
    's3Key'?: string;
    /**
     * S3 URL
     * @type {string}
     * @memberof FileOne
     */
    's3Url'?: string;
}
/**
 * 
 * @export
 * @interface KakaoAuthenticationCommand
 */
export interface KakaoAuthenticationCommand {
    /**
     * 카카오 엑세스 토큰
     * @type {string}
     * @memberof KakaoAuthenticationCommand
     */
    'kakaoAccessToken': string;
}
/**
 * 
 * @export
 * @interface KakaoJoinCheck
 */
export interface KakaoJoinCheck {
    /**
     * 이메일
     * @type {string}
     * @memberof KakaoJoinCheck
     */
    'email'?: string;
    /**
     * 가입여부
     * @type {boolean}
     * @memberof KakaoJoinCheck
     */
    'hasJoined'?: boolean;
}
/**
 * 
 * @export
 * @interface KakaoOne
 */
export interface KakaoOne {
    /**
     * 이메일
     * @type {string}
     * @memberof KakaoOne
     */
    'email'?: string;
    /**
     * 닉네임
     * @type {string}
     * @memberof KakaoOne
     */
    'nickName'?: string;
    /**
     * 전화번호
     * @type {string}
     * @memberof KakaoOne
     */
    'phoneNumber'?: string;
    /**
     * 프로필 이미지 URL
     * @type {string}
     * @memberof KakaoOne
     */
    'profileImageUrl'?: string;
    /**
     * 썸네일 이미지 URL
     * @type {string}
     * @memberof KakaoOne
     */
    'thumbnailImageUrl'?: string;
}
/**
 * 
 * @export
 * @interface MemberActAddCommand
 */
export interface MemberActAddCommand {
    /**
     * 회원 활동내역
     * @type {Array<string>}
     * @memberof MemberActAddCommand
     */
    'areas'?: Array<string>;
    /**
     * 활동직무
     * @type {Array<string>}
     * @memberof MemberActAddCommand
     */
    'duties'?: Array<string>;
}
/**
 * 
 * @export
 * @interface MemberActOne
 */
export interface MemberActOne {
    /**
     * 회원 활동내역
     * @type {Array<string>}
     * @memberof MemberActOne
     */
    'areas'?: Array<string>;
    /**
     * 활동직무
     * @type {Array<string>}
     * @memberof MemberActOne
     */
    'duties'?: Array<string>;
}
/**
 * 
 * @export
 * @interface MemberBasicOne
 */
export interface MemberBasicOne {
    /**
     * 회원 활동내역
     * @type {Array<string>}
     * @memberof MemberBasicOne
     */
    'activityAreas'?: Array<string>;
    /**
     * 도시명(영문)
     * @type {string}
     * @memberof MemberBasicOne
     */
    'cityEnglishName'?: string;
    /**
     * 도시명(국문)
     * @type {string}
     * @memberof MemberBasicOne
     */
    'cityName'?: string;
    /**
     * 국가명(영문)
     * @type {string}
     * @memberof MemberBasicOne
     */
    'countryEnglishName'?: string;
    /**
     * 국가명(국문)
     * @type {string}
     * @memberof MemberBasicOne
     */
    'countryName'?: string;
    /**
     * 생년월일
     * @type {string}
     * @memberof MemberBasicOne
     */
    'dateOfBirth'?: string;
    /**
     * 활동직무
     * @type {Array<string>}
     * @memberof MemberBasicOne
     */
    'duties'?: Array<string>;
    /**
     * 이메일
     * @type {string}
     * @memberof MemberBasicOne
     */
    'email'?: string;
    /**
     * 성별
     * @type {string}
     * @memberof MemberBasicOne
     */
    'gender'?: MemberBasicOneGenderEnum;
    /**
     * 성별코드
     * @type {string}
     * @memberof MemberBasicOne
     */
    'genderCode'?: MemberBasicOneGenderCodeEnum;
    /**
     * 이미지S3키
     * @type {string}
     * @memberof MemberBasicOne
     */
    'imageS3Key'?: string;
    /**
     * 이미지S3URL
     * @type {string}
     * @memberof MemberBasicOne
     */
    'imageSUrl'?: string;
    /**
     * 구직상태
     * @type {string}
     * @memberof MemberBasicOne
     */
    'jobSearchStatusCode'?: MemberBasicOneJobSearchStatusCodeEnum;
    /**
     * 카카오계정연결여부
     * @type {string}
     * @memberof MemberBasicOne
     */
    'kakaoLinkYn'?: string;
    /**
     * 영문이름
     * @type {string}
     * @memberof MemberBasicOne
     */
    'memberEnglishName'?: string;
    /**
     * 이름
     * @type {string}
     * @memberof MemberBasicOne
     */
    'memberName'?: string;
    /**
     * 전화번호
     * @type {string}
     * @memberof MemberBasicOne
     */
    'phoneNumber'?: string;
}

export const MemberBasicOneGenderEnum = {
    : '남자',
    : '여자'
} as const;

export type MemberBasicOneGenderEnum = typeof MemberBasicOneGenderEnum[keyof typeof MemberBasicOneGenderEnum];
export const MemberBasicOneGenderCodeEnum = {
    Female: 'FEMALE',
    Male: 'MALE'
} as const;

export type MemberBasicOneGenderCodeEnum = typeof MemberBasicOneGenderCodeEnum[keyof typeof MemberBasicOneGenderCodeEnum];
export const MemberBasicOneJobSearchStatusCodeEnum = {
    Activity: 'ACTIVITY',
    LookingFor: 'LOOKING_FOR',
    NotInterested: 'NOT_INTERESTED'
} as const;

export type MemberBasicOneJobSearchStatusCodeEnum = typeof MemberBasicOneJobSearchStatusCodeEnum[keyof typeof MemberBasicOneJobSearchStatusCodeEnum];

/**
 * 
 * @export
 * @interface MemberChangePasswordCommand
 */
export interface MemberChangePasswordCommand {
    /**
     * 새 비밀번호
     * @type {string}
     * @memberof MemberChangePasswordCommand
     */
    'newPassword'?: string;
    /**
     * 기존 비밀번호
     * @type {string}
     * @memberof MemberChangePasswordCommand
     */
    'oldPassword'?: string;
}
/**
 * 
 * @export
 * @interface MemberCommand
 */
export interface MemberCommand {
    /**
     * 생년월일
     * @type {string}
     * @memberof MemberCommand
     */
    'dateOfBirth'?: string;
    /**
     * 이메일
     * @type {string}
     * @memberof MemberCommand
     */
    'email'?: string;
    /**
     * 성별
     * @type {string}
     * @memberof MemberCommand
     */
    'gender'?: string;
    /**
     * 카카오 엑세스 토큰
     * @type {string}
     * @memberof MemberCommand
     */
    'kakaoAccessToken'?: string;
    /**
     * 마케팅수신동의여부
     * @type {string}
     * @memberof MemberCommand
     */
    'marketingReceiveAgreeYn'?: string;
    /**
     * 이름
     * @type {string}
     * @memberof MemberCommand
     */
    'memberName'?: string;
    /**
     * 비밀번호
     * @type {string}
     * @memberof MemberCommand
     */
    'password'?: string;
    /**
     * 휴대폰 번호
     * @type {string}
     * @memberof MemberCommand
     */
    'phoneNumber'?: string;
    /**
     * 가입유형
     * @type {string}
     * @memberof MemberCommand
     */
    'type'?: MemberCommandTypeEnum;
}

export const MemberCommandTypeEnum = {
    Email: 'EMAIL',
    Kakao: 'KAKAO'
} as const;

export type MemberCommandTypeEnum = typeof MemberCommandTypeEnum[keyof typeof MemberCommandTypeEnum];

/**
 * 
 * @export
 * @interface MemberEmailChangeCommand
 */
export interface MemberEmailChangeCommand {
    /**
     * 이메일
     * @type {string}
     * @memberof MemberEmailChangeCommand
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface MemberEnglishNameUpdateCommand
 */
export interface MemberEnglishNameUpdateCommand {
    /**
     * 회원영문명
     * @type {string}
     * @memberof MemberEnglishNameUpdateCommand
     */
    'memberEnglishName'?: string;
}
/**
 * 
 * @export
 * @interface MemberFindEmailCommand
 */
export interface MemberFindEmailCommand {
    /**
     * 생년월일 유형
     * @type {string}
     * @memberof MemberFindEmailCommand
     */
    'dateOfBirth': string;
    /**
     * 성별
     * @type {string}
     * @memberof MemberFindEmailCommand
     */
    'gender': string;
    /**
     * 이름
     * @type {string}
     * @memberof MemberFindEmailCommand
     */
    'memberName': string;
    /**
     * 휴대폰 번호
     * @type {string}
     * @memberof MemberFindEmailCommand
     */
    'phoneNumber': string;
}
/**
 * 
 * @export
 * @interface MemberFindEmailOne
 */
export interface MemberFindEmailOne {
    /**
     * 마스킹된 이메일
     * @type {string}
     * @memberof MemberFindEmailOne
     */
    'maskingEmail'?: string;
}
/**
 * 
 * @export
 * @interface MemberImageUpdateCommand
 */
export interface MemberImageUpdateCommand {
    /**
     * 이미지S3Key
     * @type {string}
     * @memberof MemberImageUpdateCommand
     */
    'imageS3Key'?: string;
}
/**
 * 
 * @export
 * @interface MemberJobSearchStatusCommand
 */
export interface MemberJobSearchStatusCommand {
    /**
     * 구직상태코드
     * @type {string}
     * @memberof MemberJobSearchStatusCommand
     */
    'jobSearchStatusCode'?: MemberJobSearchStatusCommandJobSearchStatusCodeEnum;
}

export const MemberJobSearchStatusCommandJobSearchStatusCodeEnum = {
    Activity: 'ACTIVITY',
    LookingFor: 'LOOKING_FOR',
    NotInterested: 'NOT_INTERESTED'
} as const;

export type MemberJobSearchStatusCommandJobSearchStatusCodeEnum = typeof MemberJobSearchStatusCommandJobSearchStatusCodeEnum[keyof typeof MemberJobSearchStatusCommandJobSearchStatusCodeEnum];

/**
 * 
 * @export
 * @interface MemberOne
 */
export interface MemberOne {
    /**
     * 이메일
     * @type {string}
     * @memberof MemberOne
     */
    'email'?: string;
    /**
     * 회원ID
     * @type {string}
     * @memberof MemberOne
     */
    'memberId'?: string;
    /**
     * Access Token
     * @type {string}
     * @memberof MemberOne
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface MemberSetPasswordCommand
 */
export interface MemberSetPasswordCommand {
    /**
     * 비밀번호
     * @type {string}
     * @memberof MemberSetPasswordCommand
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface MemberUpdateCommand
 */
export interface MemberUpdateCommand {
    /**
     * 활동지역
     * @type {Array<string>}
     * @memberof MemberUpdateCommand
     */
    'activityAreas'?: Array<string>;
    /**
     * 도시 영문명
     * @type {string}
     * @memberof MemberUpdateCommand
     */
    'cityEnglishName'?: string;
    /**
     * 도시명
     * @type {string}
     * @memberof MemberUpdateCommand
     */
    'cityName'?: string;
    /**
     * 국가 영문명
     * @type {string}
     * @memberof MemberUpdateCommand
     */
    'countryEnglishName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof MemberUpdateCommand
     */
    'countryName'?: string;
    /**
     * 생년월일
     * @type {string}
     * @memberof MemberUpdateCommand
     */
    'dateOfBirth'?: string;
    /**
     * 활동직무
     * @type {Array<string>}
     * @memberof MemberUpdateCommand
     */
    'duties'?: Array<string>;
    /**
     * 이메일
     * @type {string}
     * @memberof MemberUpdateCommand
     */
    'email'?: string;
    /**
     * 영문 이름
     * @type {string}
     * @memberof MemberUpdateCommand
     */
    'memberEnglishName'?: string;
    /**
     * 국문 이름
     * @type {string}
     * @memberof MemberUpdateCommand
     */
    'memberName'?: string;
    /**
     * 휴대폰 번호
     * @type {string}
     * @memberof MemberUpdateCommand
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface MemberWithdrawalCommand
 */
export interface MemberWithdrawalCommand {
    /**
     * 기타 사유
     * @type {string}
     * @memberof MemberWithdrawalCommand
     */
    'etc'?: string;
    /**
     * 탈퇴 사유
     * @type {string}
     * @memberof MemberWithdrawalCommand
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface PhoneVerificationCommand
 */
export interface PhoneVerificationCommand {
    /**
     * 휴대폰 번호
     * @type {string}
     * @memberof PhoneVerificationCommand
     */
    'phoneNumber'?: string;
    /**
     * 인증유형
     * @type {string}
     * @memberof PhoneVerificationCommand
     */
    'type'?: PhoneVerificationCommandTypeEnum;
    /**
     * 인증 번호
     * @type {string}
     * @memberof PhoneVerificationCommand
     */
    'verifyNumber'?: string;
}

export const PhoneVerificationCommandTypeEnum = {
    Join: 'JOIN'
} as const;

export type PhoneVerificationCommandTypeEnum = typeof PhoneVerificationCommandTypeEnum[keyof typeof PhoneVerificationCommandTypeEnum];

/**
 * 
 * @export
 * @interface PhoneVerificationNumberCommand
 */
export interface PhoneVerificationNumberCommand {
    /**
     * 휴대폰 번호
     * @type {string}
     * @memberof PhoneVerificationNumberCommand
     */
    'phoneNumber'?: string;
    /**
     * 인증유형
     * @type {string}
     * @memberof PhoneVerificationNumberCommand
     */
    'type'?: PhoneVerificationNumberCommandTypeEnum;
}

export const PhoneVerificationNumberCommandTypeEnum = {
    Join: 'JOIN'
} as const;

export type PhoneVerificationNumberCommandTypeEnum = typeof PhoneVerificationNumberCommandTypeEnum[keyof typeof PhoneVerificationNumberCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileAwardAddCommand
 */
export interface ProfileAwardAddCommand {
    /**
     * 수상월
     * @type {string}
     * @memberof ProfileAwardAddCommand
     */
    'awardMonth'?: string;
    /**
     * 수상명
     * @type {string}
     * @memberof ProfileAwardAddCommand
     */
    'awardName'?: string;
    /**
     * 수상년도
     * @type {string}
     * @memberof ProfileAwardAddCommand
     */
    'awardYear'?: string;
    /**
     * 수여기관
     * @type {string}
     * @memberof ProfileAwardAddCommand
     */
    'institutionName'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileAwardAddCommand
     */
    'note'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileAwardAddCommand
     */
    'type'?: ProfileAwardAddCommandTypeEnum;
}

export const ProfileAwardAddCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileAwardAddCommandTypeEnum = typeof ProfileAwardAddCommandTypeEnum[keyof typeof ProfileAwardAddCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileAwardOne
 */
export interface ProfileAwardOne {
    /**
     * 수상월
     * @type {string}
     * @memberof ProfileAwardOne
     */
    'awardMonth'?: string;
    /**
     * 수상명
     * @type {string}
     * @memberof ProfileAwardOne
     */
    'awardName'?: string;
    /**
     * 수상년도
     * @type {string}
     * @memberof ProfileAwardOne
     */
    'awardYear'?: string;
    /**
     * 수여기관
     * @type {string}
     * @memberof ProfileAwardOne
     */
    'institutionName'?: string;
    /**
     * 회원ID
     * @type {string}
     * @memberof ProfileAwardOne
     */
    'memberId'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileAwardOne
     */
    'note'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileAwardOne
     */
    'seq'?: number;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileAwardOne
     */
    'type'?: ProfileAwardOneTypeEnum;
}

export const ProfileAwardOneTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileAwardOneTypeEnum = typeof ProfileAwardOneTypeEnum[keyof typeof ProfileAwardOneTypeEnum];

/**
 * 
 * @export
 * @interface ProfileAwardUpdateCommand
 */
export interface ProfileAwardUpdateCommand {
    /**
     * 수상월
     * @type {string}
     * @memberof ProfileAwardUpdateCommand
     */
    'awardMonth'?: string;
    /**
     * 수상명
     * @type {string}
     * @memberof ProfileAwardUpdateCommand
     */
    'awardName'?: string;
    /**
     * 수상년도
     * @type {string}
     * @memberof ProfileAwardUpdateCommand
     */
    'awardYear'?: string;
    /**
     * 수여기관
     * @type {string}
     * @memberof ProfileAwardUpdateCommand
     */
    'institutionName'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileAwardUpdateCommand
     */
    'note'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileAwardUpdateCommand
     */
    'seq'?: number;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileAwardUpdateCommand
     */
    'type'?: ProfileAwardUpdateCommandTypeEnum;
}

export const ProfileAwardUpdateCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileAwardUpdateCommandTypeEnum = typeof ProfileAwardUpdateCommandTypeEnum[keyof typeof ProfileAwardUpdateCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileEducationAddCommand
 */
export interface ProfileEducationAddCommand {
    /**
     * 재학여부
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'attendingYn'?: string;
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'countryName'?: string;
    /**
     * 학위코드
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'degreeCode'?: ProfileEducationAddCommandDegreeCodeEnum;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'endYear'?: string;
    /**
     * 학점
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'grade'?: string;
    /**
     * 전공
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'major'?: string;
    /**
     * 부전공
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'minor'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'note'?: string;
    /**
     * 학교명
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'schoolName'?: string;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileEducationAddCommand
     */
    'type'?: ProfileEducationAddCommandTypeEnum;
}

export const ProfileEducationAddCommandDegreeCodeEnum = {
    Associate: 'ASSOCIATE ',
    Bachelor: 'BACHELOR',
    Doctor: 'DOCTOR',
    HighSchool: 'HIGH_SCHOOL',
    Master: 'MASTER'
} as const;

export type ProfileEducationAddCommandDegreeCodeEnum = typeof ProfileEducationAddCommandDegreeCodeEnum[keyof typeof ProfileEducationAddCommandDegreeCodeEnum];
export const ProfileEducationAddCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileEducationAddCommandTypeEnum = typeof ProfileEducationAddCommandTypeEnum[keyof typeof ProfileEducationAddCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileEducationOne
 */
export interface ProfileEducationOne {
    /**
     * 학위명
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'DEGREE'?: ProfileEducationOneDEGREEEnum;
    /**
     * 재학여부
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'attendingYn'?: string;
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'countryName'?: string;
    /**
     * 학위코드
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'degreeCode'?: ProfileEducationOneDegreeCodeEnum;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'endYear'?: string;
    /**
     * 학점
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'grade'?: string;
    /**
     * 전공
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'major'?: string;
    /**
     * 회원ID
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'memberId'?: string;
    /**
     * 부전공
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'minor'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'note'?: string;
    /**
     * 학교명
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'schoolName'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileEducationOne
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileEducationOne
     */
    'type'?: ProfileEducationOneTypeEnum;
}

export const ProfileEducationOneDEGREEEnum = {
    : '고등학교',
    : '박사',
    : '석사',
    _23: '전문학사(2/3년제) ',
    _4: '학사(4년제)'
} as const;

export type ProfileEducationOneDEGREEEnum = typeof ProfileEducationOneDEGREEEnum[keyof typeof ProfileEducationOneDEGREEEnum];
export const ProfileEducationOneDegreeCodeEnum = {
    Associate: 'ASSOCIATE ',
    Bachelor: 'BACHELOR',
    Doctor: 'DOCTOR',
    HighSchool: 'HIGH_SCHOOL',
    Master: 'MASTER'
} as const;

export type ProfileEducationOneDegreeCodeEnum = typeof ProfileEducationOneDegreeCodeEnum[keyof typeof ProfileEducationOneDegreeCodeEnum];
export const ProfileEducationOneTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileEducationOneTypeEnum = typeof ProfileEducationOneTypeEnum[keyof typeof ProfileEducationOneTypeEnum];

/**
 * 
 * @export
 * @interface ProfileEducationUpdateCommand
 */
export interface ProfileEducationUpdateCommand {
    /**
     * 재학여부
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'attendingYn'?: string;
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'countryName'?: string;
    /**
     * 학위코드
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'degreeCode'?: ProfileEducationUpdateCommandDegreeCodeEnum;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'endYear'?: string;
    /**
     * 학점
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'grade'?: string;
    /**
     * 전공
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'major'?: string;
    /**
     * 부전공
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'minor'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'note'?: string;
    /**
     * 학교명
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'schoolName'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileEducationUpdateCommand
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileEducationUpdateCommand
     */
    'startYear'?: string;
}

export const ProfileEducationUpdateCommandDegreeCodeEnum = {
    Associate: 'ASSOCIATE ',
    Bachelor: 'BACHELOR',
    Doctor: 'DOCTOR',
    HighSchool: 'HIGH_SCHOOL',
    Master: 'MASTER'
} as const;

export type ProfileEducationUpdateCommandDegreeCodeEnum = typeof ProfileEducationUpdateCommandDegreeCodeEnum[keyof typeof ProfileEducationUpdateCommandDegreeCodeEnum];

/**
 * 
 * @export
 * @interface ProfileLanguageAddCommand
 */
export interface ProfileLanguageAddCommand {
    /**
     * 레벨
     * @type {string}
     * @memberof ProfileLanguageAddCommand
     */
    'languageLevelCode'?: ProfileLanguageAddCommandLanguageLevelCodeEnum;
    /**
     * 외국어명
     * @type {string}
     * @memberof ProfileLanguageAddCommand
     */
    'languageName'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileLanguageAddCommand
     */
    'note'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileLanguageAddCommand
     */
    'type'?: ProfileLanguageAddCommandTypeEnum;
}

export const ProfileLanguageAddCommandLanguageLevelCodeEnum = {
    Elementary: 'ELEMENTARY',
    FullProfessional: 'FULL_PROFESSIONAL',
    Native: 'NATIVE',
    NormalProficiency: 'NORMAL_PROFICIENCY',
    Professional: 'PROFESSIONAL'
} as const;

export type ProfileLanguageAddCommandLanguageLevelCodeEnum = typeof ProfileLanguageAddCommandLanguageLevelCodeEnum[keyof typeof ProfileLanguageAddCommandLanguageLevelCodeEnum];
export const ProfileLanguageAddCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileLanguageAddCommandTypeEnum = typeof ProfileLanguageAddCommandTypeEnum[keyof typeof ProfileLanguageAddCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileLanguageOne
 */
export interface ProfileLanguageOne {
    /**
     * 레벨
     * @type {string}
     * @memberof ProfileLanguageOne
     */
    'languageLevelCode'?: ProfileLanguageOneLanguageLevelCodeEnum;
    /**
     * 외국어명
     * @type {string}
     * @memberof ProfileLanguageOne
     */
    'languageName'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileLanguageOne
     */
    'note'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileLanguageOne
     */
    'seq'?: number;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileLanguageOne
     */
    'type'?: ProfileLanguageOneTypeEnum;
}

export const ProfileLanguageOneLanguageLevelCodeEnum = {
    Elementary: 'ELEMENTARY',
    FullProfessional: 'FULL_PROFESSIONAL',
    Native: 'NATIVE',
    NormalProficiency: 'NORMAL_PROFICIENCY',
    Professional: 'PROFESSIONAL'
} as const;

export type ProfileLanguageOneLanguageLevelCodeEnum = typeof ProfileLanguageOneLanguageLevelCodeEnum[keyof typeof ProfileLanguageOneLanguageLevelCodeEnum];
export const ProfileLanguageOneTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileLanguageOneTypeEnum = typeof ProfileLanguageOneTypeEnum[keyof typeof ProfileLanguageOneTypeEnum];

/**
 * 
 * @export
 * @interface ProfileLanguageUpdateCommand
 */
export interface ProfileLanguageUpdateCommand {
    /**
     * 레벨
     * @type {string}
     * @memberof ProfileLanguageUpdateCommand
     */
    'languageLevelCode'?: ProfileLanguageUpdateCommandLanguageLevelCodeEnum;
    /**
     * 외국어명
     * @type {string}
     * @memberof ProfileLanguageUpdateCommand
     */
    'languageName'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileLanguageUpdateCommand
     */
    'note'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileLanguageUpdateCommand
     */
    'seq'?: number;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileLanguageUpdateCommand
     */
    'type'?: ProfileLanguageUpdateCommandTypeEnum;
}

export const ProfileLanguageUpdateCommandLanguageLevelCodeEnum = {
    Elementary: 'ELEMENTARY',
    FullProfessional: 'FULL_PROFESSIONAL',
    Native: 'NATIVE',
    NormalProficiency: 'NORMAL_PROFICIENCY',
    Professional: 'PROFESSIONAL'
} as const;

export type ProfileLanguageUpdateCommandLanguageLevelCodeEnum = typeof ProfileLanguageUpdateCommandLanguageLevelCodeEnum[keyof typeof ProfileLanguageUpdateCommandLanguageLevelCodeEnum];
export const ProfileLanguageUpdateCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileLanguageUpdateCommandTypeEnum = typeof ProfileLanguageUpdateCommandTypeEnum[keyof typeof ProfileLanguageUpdateCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileLicenseAddCommand
 */
export interface ProfileLicenseAddCommand {
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileLicenseAddCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileLicenseAddCommand
     */
    'endYear'?: string;
    /**
     * 만료기한존재여부
     * @type {string}
     * @memberof ProfileLicenseAddCommand
     */
    'expirationExistsYn'?: string;
    /**
     * 제공기관명
     * @type {string}
     * @memberof ProfileLicenseAddCommand
     */
    'institutionName'?: string;
    /**
     * 자격증/수료증 이름
     * @type {string}
     * @memberof ProfileLicenseAddCommand
     */
    'licenseName'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileLicenseAddCommand
     */
    'note'?: string;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileLicenseAddCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileLicenseAddCommand
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileLicenseAddCommand
     */
    'type'?: ProfileLicenseAddCommandTypeEnum;
}

export const ProfileLicenseAddCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileLicenseAddCommandTypeEnum = typeof ProfileLicenseAddCommandTypeEnum[keyof typeof ProfileLicenseAddCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileLicenseOne
 */
export interface ProfileLicenseOne {
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileLicenseOne
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileLicenseOne
     */
    'endYear'?: string;
    /**
     * 만료기한존재여부
     * @type {string}
     * @memberof ProfileLicenseOne
     */
    'expirationExistsYn'?: string;
    /**
     * 제공기관명
     * @type {string}
     * @memberof ProfileLicenseOne
     */
    'institutionName'?: string;
    /**
     * 자격증/수료증 이름
     * @type {string}
     * @memberof ProfileLicenseOne
     */
    'licenseName'?: string;
    /**
     * 회원ID
     * @type {string}
     * @memberof ProfileLicenseOne
     */
    'memberId'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileLicenseOne
     */
    'note'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileLicenseOne
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileLicenseOne
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileLicenseOne
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileLicenseOne
     */
    'type'?: ProfileLicenseOneTypeEnum;
}

export const ProfileLicenseOneTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileLicenseOneTypeEnum = typeof ProfileLicenseOneTypeEnum[keyof typeof ProfileLicenseOneTypeEnum];

/**
 * 
 * @export
 * @interface ProfileLicenseUpdateCommand
 */
export interface ProfileLicenseUpdateCommand {
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileLicenseUpdateCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileLicenseUpdateCommand
     */
    'endYear'?: string;
    /**
     * 만료기한존재여부
     * @type {string}
     * @memberof ProfileLicenseUpdateCommand
     */
    'expirationExistsYn'?: string;
    /**
     * 제공기관명
     * @type {string}
     * @memberof ProfileLicenseUpdateCommand
     */
    'institutionName'?: string;
    /**
     * 자격증/수료증 이름
     * @type {string}
     * @memberof ProfileLicenseUpdateCommand
     */
    'licenseName'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileLicenseUpdateCommand
     */
    'note'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileLicenseUpdateCommand
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileLicenseUpdateCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileLicenseUpdateCommand
     */
    'startYear'?: string;
}
/**
 * 
 * @export
 * @interface ProfileOne
 */
export interface ProfileOne {
    /**
     * 
     * @type {Array<ProfileAwardOne>}
     * @memberof ProfileOne
     */
    'awards'?: Array<ProfileAwardOne>;
    /**
     * 
     * @type {Array<ProfileEducationOne>}
     * @memberof ProfileOne
     */
    'education'?: Array<ProfileEducationOne>;
    /**
     * 
     * @type {Array<ProfileLanguageOne>}
     * @memberof ProfileOne
     */
    'language'?: Array<ProfileLanguageOne>;
    /**
     * 
     * @type {Array<ProfileLicenseOne>}
     * @memberof ProfileOne
     */
    'licenses'?: Array<ProfileLicenseOne>;
    /**
     * 
     * @type {MemberBasicOne}
     * @memberof ProfileOne
     */
    'member'?: MemberBasicOne;
    /**
     * 
     * @type {Array<ProfileOrganizationOne>}
     * @memberof ProfileOne
     */
    'organizations'?: Array<ProfileOrganizationOne>;
    /**
     * 
     * @type {Array<ProfilePortfolioOne>}
     * @memberof ProfileOne
     */
    'portfolios'?: Array<ProfilePortfolioOne>;
    /**
     * 
     * @type {Array<ProfileProjectOne>}
     * @memberof ProfileOne
     */
    'projects'?: Array<ProfileProjectOne>;
    /**
     * 
     * @type {Array<ProfileSkillOne>}
     * @memberof ProfileOne
     */
    'skills'?: Array<ProfileSkillOne>;
    /**
     * 
     * @type {Array<ProfileVolunteerOne>}
     * @memberof ProfileOne
     */
    'volunteering'?: Array<ProfileVolunteerOne>;
    /**
     * 
     * @type {Array<ProfileWorkExperienceOne>}
     * @memberof ProfileOne
     */
    'workExperience'?: Array<ProfileWorkExperienceOne>;
}
/**
 * 
 * @export
 * @interface ProfileOrganizationAddCommand
 */
export interface ProfileOrganizationAddCommand {
    /**
     * 활동명
     * @type {string}
     * @memberof ProfileOrganizationAddCommand
     */
    'activityName'?: string;
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileOrganizationAddCommand
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileOrganizationAddCommand
     */
    'countryName'?: string;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileOrganizationAddCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileOrganizationAddCommand
     */
    'endYear'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileOrganizationAddCommand
     */
    'note'?: string;
    /**
     * 현재진행여부
     * @type {string}
     * @memberof ProfileOrganizationAddCommand
     */
    'ongoingYn'?: string;
    /**
     * 역할/포지션
     * @type {string}
     * @memberof ProfileOrganizationAddCommand
     */
    'roleName'?: string;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileOrganizationAddCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileOrganizationAddCommand
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileOrganizationAddCommand
     */
    'type'?: ProfileOrganizationAddCommandTypeEnum;
}

export const ProfileOrganizationAddCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileOrganizationAddCommandTypeEnum = typeof ProfileOrganizationAddCommandTypeEnum[keyof typeof ProfileOrganizationAddCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileOrganizationOne
 */
export interface ProfileOrganizationOne {
    /**
     * 활동명
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'activityName'?: string;
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'countryName'?: string;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'endYear'?: string;
    /**
     * 회원ID
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'memberId'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'note'?: string;
    /**
     * 진행중여부
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'ongoingYn'?: string;
    /**
     * 역할/포지션
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'roleName'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileOrganizationOne
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileOrganizationOne
     */
    'type'?: ProfileOrganizationOneTypeEnum;
}

export const ProfileOrganizationOneTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileOrganizationOneTypeEnum = typeof ProfileOrganizationOneTypeEnum[keyof typeof ProfileOrganizationOneTypeEnum];

/**
 * 
 * @export
 * @interface ProfileOrganizationUpdateCommand
 */
export interface ProfileOrganizationUpdateCommand {
    /**
     * 활동명
     * @type {string}
     * @memberof ProfileOrganizationUpdateCommand
     */
    'activityName'?: string;
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileOrganizationUpdateCommand
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileOrganizationUpdateCommand
     */
    'countryName'?: string;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileOrganizationUpdateCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileOrganizationUpdateCommand
     */
    'endYear'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileOrganizationUpdateCommand
     */
    'note'?: string;
    /**
     * 현재진행여부
     * @type {string}
     * @memberof ProfileOrganizationUpdateCommand
     */
    'ongoingYn'?: string;
    /**
     * 역할/포지션
     * @type {string}
     * @memberof ProfileOrganizationUpdateCommand
     */
    'roleName'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileOrganizationUpdateCommand
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileOrganizationUpdateCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileOrganizationUpdateCommand
     */
    'startYear'?: string;
}
/**
 * 
 * @export
 * @interface ProfilePdfOne
 */
export interface ProfilePdfOne {
    /**
     * 
     * @type {Array<ProfileAwardOne>}
     * @memberof ProfilePdfOne
     */
    'awards'?: Array<ProfileAwardOne>;
    /**
     * 
     * @type {Array<ProfileEducationOne>}
     * @memberof ProfilePdfOne
     */
    'education'?: Array<ProfileEducationOne>;
    /**
     * 
     * @type {string}
     * @memberof ProfilePdfOne
     */
    'language'?: string;
    /**
     * 
     * @type {Array<ProfileLicenseOne>}
     * @memberof ProfilePdfOne
     */
    'licenses'?: Array<ProfileLicenseOne>;
    /**
     * 
     * @type {MemberBasicOne}
     * @memberof ProfilePdfOne
     */
    'member'?: MemberBasicOne;
    /**
     * 
     * @type {Array<ProfileOrganizationOne>}
     * @memberof ProfilePdfOne
     */
    'organizations'?: Array<ProfileOrganizationOne>;
    /**
     * 
     * @type {Array<ProfilePortfolioOne>}
     * @memberof ProfilePdfOne
     */
    'portfolios'?: Array<ProfilePortfolioOne>;
    /**
     * 
     * @type {Array<ProfileProjectOne>}
     * @memberof ProfilePdfOne
     */
    'projects'?: Array<ProfileProjectOne>;
    /**
     * 
     * @type {string}
     * @memberof ProfilePdfOne
     */
    'skills'?: string;
    /**
     * 
     * @type {Array<ProfileVolunteerOne>}
     * @memberof ProfilePdfOne
     */
    'volunteering'?: Array<ProfileVolunteerOne>;
    /**
     * 
     * @type {Array<ProfileWorkExperienceOne>}
     * @memberof ProfilePdfOne
     */
    'workExperience'?: Array<ProfileWorkExperienceOne>;
}
/**
 * 
 * @export
 * @interface ProfilePortfolioAddCommand
 */
export interface ProfilePortfolioAddCommand {
    /**
     * 링크
     * @type {string}
     * @memberof ProfilePortfolioAddCommand
     */
    'link'?: string;
    /**
     * S3 Key
     * @type {string}
     * @memberof ProfilePortfolioAddCommand
     */
    's3Key'?: string;
    /**
     * 포트폴리오 제목
     * @type {string}
     * @memberof ProfilePortfolioAddCommand
     */
    'title'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfilePortfolioAddCommand
     */
    'type'?: ProfilePortfolioAddCommandTypeEnum;
}

export const ProfilePortfolioAddCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfilePortfolioAddCommandTypeEnum = typeof ProfilePortfolioAddCommandTypeEnum[keyof typeof ProfilePortfolioAddCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfilePortfolioOne
 */
export interface ProfilePortfolioOne {
    /**
     * 
     * @type {boolean}
     * @memberof ProfilePortfolioOne
     */
    'image'?: boolean;
    /**
     * 이미지파일여부
     * @type {boolean}
     * @memberof ProfilePortfolioOne
     */
    'isImage'?: boolean;
    /**
     * 링크
     * @type {string}
     * @memberof ProfilePortfolioOne
     */
    'link'?: string;
    /**
     * 회원ID
     * @type {string}
     * @memberof ProfilePortfolioOne
     */
    'memberId'?: string;
    /**
     * S3키값
     * @type {string}
     * @memberof ProfilePortfolioOne
     */
    's3Key'?: string;
    /**
     * S3Url
     * @type {string}
     * @memberof ProfilePortfolioOne
     */
    's3Url'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfilePortfolioOne
     */
    'seq'?: number;
    /**
     * 포트폴리오 제목
     * @type {string}
     * @memberof ProfilePortfolioOne
     */
    'title'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfilePortfolioOne
     */
    'type'?: ProfilePortfolioOneTypeEnum;
}

export const ProfilePortfolioOneTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfilePortfolioOneTypeEnum = typeof ProfilePortfolioOneTypeEnum[keyof typeof ProfilePortfolioOneTypeEnum];

/**
 * 
 * @export
 * @interface ProfilePortfolioUpdateCommand
 */
export interface ProfilePortfolioUpdateCommand {
    /**
     * 링크
     * @type {string}
     * @memberof ProfilePortfolioUpdateCommand
     */
    'link'?: string;
    /**
     * S3 Key
     * @type {string}
     * @memberof ProfilePortfolioUpdateCommand
     */
    's3Key'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfilePortfolioUpdateCommand
     */
    'seq'?: number;
    /**
     * 포트폴리오 제목
     * @type {string}
     * @memberof ProfilePortfolioUpdateCommand
     */
    'title'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfilePortfolioUpdateCommand
     */
    'type'?: ProfilePortfolioUpdateCommandTypeEnum;
}

export const ProfilePortfolioUpdateCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfilePortfolioUpdateCommandTypeEnum = typeof ProfilePortfolioUpdateCommandTypeEnum[keyof typeof ProfilePortfolioUpdateCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileProjectAddCommand
 */
export interface ProfileProjectAddCommand {
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'countryName'?: string;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'endYear'?: string;
    /**
     * 링크
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'link'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'note'?: string;
    /**
     * 진행중여부
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'ongoingYn'?: string;
    /**
     * 프로젝트명
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'projectName'?: string;
    /**
     * 역할/포지션
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'roleName'?: string;
    /**
     * S3 Key
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    's3Key'?: string;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileProjectAddCommand
     */
    'type'?: ProfileProjectAddCommandTypeEnum;
}

export const ProfileProjectAddCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileProjectAddCommandTypeEnum = typeof ProfileProjectAddCommandTypeEnum[keyof typeof ProfileProjectAddCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileProjectOne
 */
export interface ProfileProjectOne {
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'countryName'?: string;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'endYear'?: string;
    /**
     * 링크
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'link'?: string;
    /**
     * 회원ID
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'memberId'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'note'?: string;
    /**
     * 진행중여부
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'ongoingYn'?: string;
    /**
     * 프로젝트명
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'projectName'?: string;
    /**
     * 역할/포지션
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'roleName'?: string;
    /**
     * S3키값
     * @type {string}
     * @memberof ProfileProjectOne
     */
    's3Key'?: string;
    /**
     * S3Url
     * @type {string}
     * @memberof ProfileProjectOne
     */
    's3Url'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileProjectOne
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileProjectOne
     */
    'type'?: ProfileProjectOneTypeEnum;
}

export const ProfileProjectOneTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileProjectOneTypeEnum = typeof ProfileProjectOneTypeEnum[keyof typeof ProfileProjectOneTypeEnum];

/**
 * 
 * @export
 * @interface ProfileProjectUpdateCommand
 */
export interface ProfileProjectUpdateCommand {
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    'countryName'?: string;
    /**
     * 종ㄹ월(To)
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    'endYear'?: string;
    /**
     * 링크
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    'link'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    'note'?: string;
    /**
     * 진행중여부
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    'ongoingYn'?: string;
    /**
     * 프로젝트명
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    'projectName'?: string;
    /**
     * 역할/포지션
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    'roleName'?: string;
    /**
     * S3 Key
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    's3Key'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileProjectUpdateCommand
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileProjectUpdateCommand
     */
    'startYear'?: string;
}
/**
 * 
 * @export
 * @interface ProfileSkillAddCommand
 */
export interface ProfileSkillAddCommand {
    /**
     * 숙련도
     * @type {string}
     * @memberof ProfileSkillAddCommand
     */
    'skillLevelCode'?: ProfileSkillAddCommandSkillLevelCodeEnum;
    /**
     * 역량&스킬
     * @type {string}
     * @memberof ProfileSkillAddCommand
     */
    'skillName'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileSkillAddCommand
     */
    'type'?: ProfileSkillAddCommandTypeEnum;
}

export const ProfileSkillAddCommandSkillLevelCodeEnum = {
    _000: '000',
    _001: '001',
    _002: '002',
    _003: '003',
    _004: '004',
    _005: '005'
} as const;

export type ProfileSkillAddCommandSkillLevelCodeEnum = typeof ProfileSkillAddCommandSkillLevelCodeEnum[keyof typeof ProfileSkillAddCommandSkillLevelCodeEnum];
export const ProfileSkillAddCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileSkillAddCommandTypeEnum = typeof ProfileSkillAddCommandTypeEnum[keyof typeof ProfileSkillAddCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileSkillCommand
 */
export interface ProfileSkillCommand {
    /**
     * 숙련도
     * @type {string}
     * @memberof ProfileSkillCommand
     */
    'skillLevelCode'?: ProfileSkillCommandSkillLevelCodeEnum;
    /**
     * 역량&스킬
     * @type {string}
     * @memberof ProfileSkillCommand
     */
    'skillName'?: string;
}

export const ProfileSkillCommandSkillLevelCodeEnum = {
    _000: '000',
    _001: '001',
    _002: '002',
    _003: '003',
    _004: '004',
    _005: '005'
} as const;

export type ProfileSkillCommandSkillLevelCodeEnum = typeof ProfileSkillCommandSkillLevelCodeEnum[keyof typeof ProfileSkillCommandSkillLevelCodeEnum];

/**
 * 
 * @export
 * @interface ProfileSkillOne
 */
export interface ProfileSkillOne {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileSkillOne
     */
    'seq'?: number;
    /**
     * 숙련도
     * @type {string}
     * @memberof ProfileSkillOne
     */
    'skillLevelCode'?: ProfileSkillOneSkillLevelCodeEnum;
    /**
     * 역량&스킬
     * @type {string}
     * @memberof ProfileSkillOne
     */
    'skillName'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileSkillOne
     */
    'type'?: string;
}

export const ProfileSkillOneSkillLevelCodeEnum = {
    _000: '000',
    _001: '001',
    _002: '002',
    _003: '003',
    _004: '004',
    _005: '005'
} as const;

export type ProfileSkillOneSkillLevelCodeEnum = typeof ProfileSkillOneSkillLevelCodeEnum[keyof typeof ProfileSkillOneSkillLevelCodeEnum];

/**
 * 
 * @export
 * @interface ProfileSkillSaveCommand
 */
export interface ProfileSkillSaveCommand {
    /**
     * 
     * @type {Array<ProfileSkillCommand>}
     * @memberof ProfileSkillSaveCommand
     */
    'skills'?: Array<ProfileSkillCommand>;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileSkillSaveCommand
     */
    'type'?: ProfileSkillSaveCommandTypeEnum;
}

export const ProfileSkillSaveCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileSkillSaveCommandTypeEnum = typeof ProfileSkillSaveCommandTypeEnum[keyof typeof ProfileSkillSaveCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileSkillUpdateCommand
 */
export interface ProfileSkillUpdateCommand {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileSkillUpdateCommand
     */
    'seq'?: number;
    /**
     * 숙련도
     * @type {string}
     * @memberof ProfileSkillUpdateCommand
     */
    'skillLevelCode'?: ProfileSkillUpdateCommandSkillLevelCodeEnum;
    /**
     * 역량&스킬
     * @type {string}
     * @memberof ProfileSkillUpdateCommand
     */
    'skillName'?: string;
}

export const ProfileSkillUpdateCommandSkillLevelCodeEnum = {
    _000: '000',
    _001: '001',
    _002: '002',
    _003: '003',
    _004: '004',
    _005: '005'
} as const;

export type ProfileSkillUpdateCommandSkillLevelCodeEnum = typeof ProfileSkillUpdateCommandSkillLevelCodeEnum[keyof typeof ProfileSkillUpdateCommandSkillLevelCodeEnum];

/**
 * 
 * @export
 * @interface ProfileVolunteerAddCommand
 */
export interface ProfileVolunteerAddCommand {
    /**
     * 기관/단체
     * @type {string}
     * @memberof ProfileVolunteerAddCommand
     */
    'activityName'?: string;
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileVolunteerAddCommand
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileVolunteerAddCommand
     */
    'countryName'?: string;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileVolunteerAddCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileVolunteerAddCommand
     */
    'endYear'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileVolunteerAddCommand
     */
    'note'?: string;
    /**
     * 현재진행여부
     * @type {string}
     * @memberof ProfileVolunteerAddCommand
     */
    'ongoingYn'?: string;
    /**
     * 역할/포지션
     * @type {string}
     * @memberof ProfileVolunteerAddCommand
     */
    'roleName'?: string;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileVolunteerAddCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileVolunteerAddCommand
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileVolunteerAddCommand
     */
    'type'?: ProfileVolunteerAddCommandTypeEnum;
}

export const ProfileVolunteerAddCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileVolunteerAddCommandTypeEnum = typeof ProfileVolunteerAddCommandTypeEnum[keyof typeof ProfileVolunteerAddCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileVolunteerOne
 */
export interface ProfileVolunteerOne {
    /**
     * 기관/단체
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'activityName'?: string;
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'countryName'?: string;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'endYear'?: string;
    /**
     * 회원ID
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'memberId'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'note'?: string;
    /**
     * 진행중여부
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'ongoingYn'?: string;
    /**
     * 역할/포지션
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'roleName'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileVolunteerOne
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileVolunteerOne
     */
    'type'?: ProfileVolunteerOneTypeEnum;
}

export const ProfileVolunteerOneTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileVolunteerOneTypeEnum = typeof ProfileVolunteerOneTypeEnum[keyof typeof ProfileVolunteerOneTypeEnum];

/**
 * 
 * @export
 * @interface ProfileVolunteerUpdateCommand
 */
export interface ProfileVolunteerUpdateCommand {
    /**
     * 기관/단체
     * @type {string}
     * @memberof ProfileVolunteerUpdateCommand
     */
    'activityName'?: string;
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileVolunteerUpdateCommand
     */
    'cityName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileVolunteerUpdateCommand
     */
    'countryName'?: string;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileVolunteerUpdateCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileVolunteerUpdateCommand
     */
    'endYear'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileVolunteerUpdateCommand
     */
    'note'?: string;
    /**
     * 현재진행여부
     * @type {string}
     * @memberof ProfileVolunteerUpdateCommand
     */
    'ongoingYn'?: string;
    /**
     * 역할/포지션
     * @type {string}
     * @memberof ProfileVolunteerUpdateCommand
     */
    'roleName'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileVolunteerUpdateCommand
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileVolunteerUpdateCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileVolunteerUpdateCommand
     */
    'startYear'?: string;
}
/**
 * 
 * @export
 * @interface ProfileWorkExperienceAddCommand
 */
export interface ProfileWorkExperienceAddCommand {
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'cityName'?: string;
    /**
     * 기업명
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'companyName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'countryName'?: string;
    /**
     * 고용형태코드
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'employmentTypeCode'?: ProfileWorkExperienceAddCommandEmploymentTypeCodeEnum;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'endYear'?: string;
    /**
     * 재직여부
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'inServiceYn'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'note'?: string;
    /**
     * 직무(포지션)
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'position'?: string;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileWorkExperienceAddCommand
     */
    'type'?: ProfileWorkExperienceAddCommandTypeEnum;
}

export const ProfileWorkExperienceAddCommandEmploymentTypeCodeEnum = {
    Apprenticeship: 'APPRENTICESHIP',
    Contract: 'CONTRACT',
    Freelancer: 'FREELANCER',
    FullTime: 'FULL_TIME',
    Intern: 'INTERN',
    PartTime: 'PART_TIME',
    SelfEmployed: 'SELF_EMPLOYED'
} as const;

export type ProfileWorkExperienceAddCommandEmploymentTypeCodeEnum = typeof ProfileWorkExperienceAddCommandEmploymentTypeCodeEnum[keyof typeof ProfileWorkExperienceAddCommandEmploymentTypeCodeEnum];
export const ProfileWorkExperienceAddCommandTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileWorkExperienceAddCommandTypeEnum = typeof ProfileWorkExperienceAddCommandTypeEnum[keyof typeof ProfileWorkExperienceAddCommandTypeEnum];

/**
 * 
 * @export
 * @interface ProfileWorkExperienceOne
 */
export interface ProfileWorkExperienceOne {
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'cityName'?: string;
    /**
     * 기업명
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'companyName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'countryName'?: string;
    /**
     * 고용형태
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'employmentTypeCode'?: ProfileWorkExperienceOneEmploymentTypeCodeEnum;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'endYear'?: string;
    /**
     * 재직여부
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'inServiceYn'?: string;
    /**
     * 회원ID
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'memberId'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'note'?: string;
    /**
     * 직무(포지션)
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'position'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileWorkExperienceOne
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'startYear'?: string;
    /**
     * 유형
     * @type {string}
     * @memberof ProfileWorkExperienceOne
     */
    'type'?: ProfileWorkExperienceOneTypeEnum;
}

export const ProfileWorkExperienceOneEmploymentTypeCodeEnum = {
    Apprenticeship: 'APPRENTICESHIP',
    Contract: 'CONTRACT',
    Freelancer: 'FREELANCER',
    FullTime: 'FULL_TIME',
    Intern: 'INTERN',
    PartTime: 'PART_TIME',
    SelfEmployed: 'SELF_EMPLOYED'
} as const;

export type ProfileWorkExperienceOneEmploymentTypeCodeEnum = typeof ProfileWorkExperienceOneEmploymentTypeCodeEnum[keyof typeof ProfileWorkExperienceOneEmploymentTypeCodeEnum];
export const ProfileWorkExperienceOneTypeEnum = {
    En: 'EN',
    Kr: 'KR'
} as const;

export type ProfileWorkExperienceOneTypeEnum = typeof ProfileWorkExperienceOneTypeEnum[keyof typeof ProfileWorkExperienceOneTypeEnum];

/**
 * 
 * @export
 * @interface ProfileWorkExperienceUpdateCommand
 */
export interface ProfileWorkExperienceUpdateCommand {
    /**
     * 도시명
     * @type {string}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'cityName'?: string;
    /**
     * 기업명
     * @type {string}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'companyName'?: string;
    /**
     * 국가명
     * @type {string}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'countryName'?: string;
    /**
     * 고용형태코드
     * @type {string}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'employmentTypeCode'?: ProfileWorkExperienceUpdateCommandEmploymentTypeCodeEnum;
    /**
     * 종료월(To)
     * @type {string}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'endMonth'?: string;
    /**
     * 종료년도(To)
     * @type {string}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'endYear'?: string;
    /**
     * 재직여부
     * @type {string}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'inServiceYn'?: string;
    /**
     * 상세내용
     * @type {string}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'note'?: string;
    /**
     * 직무(포지션)
     * @type {string}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'position'?: string;
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'seq'?: number;
    /**
     * 시작월(From)
     * @type {string}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'startMonth'?: string;
    /**
     * 시작년도(From)
     * @type {string}
     * @memberof ProfileWorkExperienceUpdateCommand
     */
    'startYear'?: string;
}

export const ProfileWorkExperienceUpdateCommandEmploymentTypeCodeEnum = {
    Apprenticeship: 'APPRENTICESHIP',
    Contract: 'CONTRACT',
    Freelancer: 'FREELANCER',
    FullTime: 'FULL_TIME',
    Intern: 'INTERN',
    PartTime: 'PART_TIME',
    SelfEmployed: 'SELF_EMPLOYED'
} as const;

export type ProfileWorkExperienceUpdateCommandEmploymentTypeCodeEnum = typeof ProfileWorkExperienceUpdateCommandEmploymentTypeCodeEnum[keyof typeof ProfileWorkExperienceUpdateCommandEmploymentTypeCodeEnum];

/**
 * 
 * @export
 * @interface TokenOne
 */
export interface TokenOne {
    /**
     * Access Token
     * @type {string}
     * @memberof TokenOne
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface TooltipOne
 */
export interface TooltipOne {
    /**
     * 확인여부
     * @type {string}
     * @memberof TooltipOne
     */
    'checkYn'?: string;
    /**
     * 툴팁ID
     * @type {string}
     * @memberof TooltipOne
     */
    'tooltipId'?: string;
    /**
     * 툴팁명
     * @type {string}
     * @memberof TooltipOne
     */
    'tooltipName'?: string;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 비밀번호 찾기, 비밀번호를 모를때 이메일 인증(type: CHANGE_EMAIL) 후 비밀번호를 변경할 수 있다.
         * @summary 비밀번호 변경 API
         * @param {ChangePasswordCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST: async (command: ChangePasswordCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('changePasswordUsingPOST', 'command', command)
            const localVarPath = `/api/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 이메일 찾기 API
         * @param {MemberFindEmailCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEmailUsingPOST: async (command: MemberFindEmailCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('findEmailUsingPOST', 'command', command)
            const localVarPath = `/api/account/find-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 가입유형(type) : {\"EMAIL\", \"KAKAO\"}  <a href=\"https://we-hop.atlassian.net/wiki/spaces/WEH/pages/13565981\" target=\"_blank\">WEHOP API Document</a>
         * @summary 회원가입 API
         * @param {MemberCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUsingPOST: async (command: MemberCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('signupUsingPOST', 'command', command)
            const localVarPath = `/api/account/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원탈퇴 API
         * @param {MemberWithdrawalCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawalUsingPOST: async (command: MemberWithdrawalCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('withdrawalUsingPOST', 'command', command)
            const localVarPath = `/api/account/withdrawal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 비밀번호 찾기, 비밀번호를 모를때 이메일 인증(type: CHANGE_EMAIL) 후 비밀번호를 변경할 수 있다.
         * @summary 비밀번호 변경 API
         * @param {ChangePasswordCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePasswordUsingPOST(command: ChangePasswordCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePasswordUsingPOST(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 이메일 찾기 API
         * @param {MemberFindEmailCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findEmailUsingPOST(command: MemberFindEmailCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberFindEmailOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findEmailUsingPOST(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 가입유형(type) : {\"EMAIL\", \"KAKAO\"}  <a href=\"https://we-hop.atlassian.net/wiki/spaces/WEH/pages/13565981\" target=\"_blank\">WEHOP API Document</a>
         * @summary 회원가입 API
         * @param {MemberCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signupUsingPOST(command: MemberCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signupUsingPOST(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원탈퇴 API
         * @param {MemberWithdrawalCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async withdrawalUsingPOST(command: MemberWithdrawalCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberFindEmailOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.withdrawalUsingPOST(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 비밀번호 찾기, 비밀번호를 모를때 이메일 인증(type: CHANGE_EMAIL) 후 비밀번호를 변경할 수 있다.
         * @summary 비밀번호 변경 API
         * @param {AccountApiChangePasswordUsingPOSTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST(requestParameters: AccountApiChangePasswordUsingPOSTRequest, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.changePasswordUsingPOST(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 이메일 찾기 API
         * @param {AccountApiFindEmailUsingPOSTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEmailUsingPOST(requestParameters: AccountApiFindEmailUsingPOSTRequest, options?: AxiosRequestConfig): AxiosPromise<MemberFindEmailOne> {
            return localVarFp.findEmailUsingPOST(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 가입유형(type) : {\"EMAIL\", \"KAKAO\"}  <a href=\"https://we-hop.atlassian.net/wiki/spaces/WEH/pages/13565981\" target=\"_blank\">WEHOP API Document</a>
         * @summary 회원가입 API
         * @param {AccountApiSignupUsingPOSTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupUsingPOST(requestParameters: AccountApiSignupUsingPOSTRequest, options?: AxiosRequestConfig): AxiosPromise<MemberOne> {
            return localVarFp.signupUsingPOST(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원탈퇴 API
         * @param {AccountApiWithdrawalUsingPOSTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        withdrawalUsingPOST(requestParameters: AccountApiWithdrawalUsingPOSTRequest, options?: AxiosRequestConfig): AxiosPromise<MemberFindEmailOne> {
            return localVarFp.withdrawalUsingPOST(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changePasswordUsingPOST operation in AccountApi.
 * @export
 * @interface AccountApiChangePasswordUsingPOSTRequest
 */
export interface AccountApiChangePasswordUsingPOSTRequest {
    /**
     * command
     * @type {ChangePasswordCommand}
     * @memberof AccountApiChangePasswordUsingPOST
     */
    readonly command: ChangePasswordCommand
}

/**
 * Request parameters for findEmailUsingPOST operation in AccountApi.
 * @export
 * @interface AccountApiFindEmailUsingPOSTRequest
 */
export interface AccountApiFindEmailUsingPOSTRequest {
    /**
     * command
     * @type {MemberFindEmailCommand}
     * @memberof AccountApiFindEmailUsingPOST
     */
    readonly command: MemberFindEmailCommand
}

/**
 * Request parameters for signupUsingPOST operation in AccountApi.
 * @export
 * @interface AccountApiSignupUsingPOSTRequest
 */
export interface AccountApiSignupUsingPOSTRequest {
    /**
     * command
     * @type {MemberCommand}
     * @memberof AccountApiSignupUsingPOST
     */
    readonly command: MemberCommand
}

/**
 * Request parameters for withdrawalUsingPOST operation in AccountApi.
 * @export
 * @interface AccountApiWithdrawalUsingPOSTRequest
 */
export interface AccountApiWithdrawalUsingPOSTRequest {
    /**
     * command
     * @type {MemberWithdrawalCommand}
     * @memberof AccountApiWithdrawalUsingPOST
     */
    readonly command: MemberWithdrawalCommand
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 비밀번호 찾기, 비밀번호를 모를때 이메일 인증(type: CHANGE_EMAIL) 후 비밀번호를 변경할 수 있다.
     * @summary 비밀번호 변경 API
     * @param {AccountApiChangePasswordUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public changePasswordUsingPOST(requestParameters: AccountApiChangePasswordUsingPOSTRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).changePasswordUsingPOST(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 이메일 찾기 API
     * @param {AccountApiFindEmailUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public findEmailUsingPOST(requestParameters: AccountApiFindEmailUsingPOSTRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).findEmailUsingPOST(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 가입유형(type) : {\"EMAIL\", \"KAKAO\"}  <a href=\"https://we-hop.atlassian.net/wiki/spaces/WEH/pages/13565981\" target=\"_blank\">WEHOP API Document</a>
     * @summary 회원가입 API
     * @param {AccountApiSignupUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public signupUsingPOST(requestParameters: AccountApiSignupUsingPOSTRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).signupUsingPOST(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원탈퇴 API
     * @param {AccountApiWithdrawalUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public withdrawalUsingPOST(requestParameters: AccountApiWithdrawalUsingPOSTRequest, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).withdrawalUsingPOST(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API 사용시 함께 요청할 Access Token 발급을 요창한다.
         * @summary 인증 API
         * @param {AuthenticationCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateUsingPOST: async (command: AuthenticationCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('authenticateUsingPOST', 'command', command)
            const localVarPath = `/api/authenticate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 로그아웃 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidateUsingPOST: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authenticate/invalidate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 인증 토큰 리프레시 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshUsingPOST: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authenticate/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * API 사용시 함께 요청할 Access Token 발급을 요창한다.
         * @summary 인증 API
         * @param {AuthenticationCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateUsingPOST(command: AuthenticationCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateUsingPOST(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 로그아웃 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invalidateUsingPOST(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invalidateUsingPOST(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 인증 토큰 리프레시 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshUsingPOST(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshUsingPOST(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * API 사용시 함께 요청할 Access Token 발급을 요창한다.
         * @summary 인증 API
         * @param {AuthenticationApiAuthenticateUsingPOSTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateUsingPOST(requestParameters: AuthenticationApiAuthenticateUsingPOSTRequest, options?: AxiosRequestConfig): AxiosPromise<TokenOne> {
            return localVarFp.authenticateUsingPOST(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 로그아웃 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invalidateUsingPOST(options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.invalidateUsingPOST(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 인증 토큰 리프레시 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshUsingPOST(options?: AxiosRequestConfig): AxiosPromise<TokenOne> {
            return localVarFp.refreshUsingPOST(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authenticateUsingPOST operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthenticateUsingPOSTRequest
 */
export interface AuthenticationApiAuthenticateUsingPOSTRequest {
    /**
     * command
     * @type {AuthenticationCommand}
     * @memberof AuthenticationApiAuthenticateUsingPOST
     */
    readonly command: AuthenticationCommand
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * API 사용시 함께 요청할 Access Token 발급을 요창한다.
     * @summary 인증 API
     * @param {AuthenticationApiAuthenticateUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authenticateUsingPOST(requestParameters: AuthenticationApiAuthenticateUsingPOSTRequest, options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authenticateUsingPOST(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 로그아웃 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public invalidateUsingPOST(options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).invalidateUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 인증 토큰 리프레시 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public refreshUsingPOST(options?: AxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).refreshUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthenticationKakaoApi - axios parameter creator
 * @export
 */
export const AuthenticationKakaoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 카카오 인증 API
         * @param {KakaoAuthenticationCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateByKakaoUsingPOST: async (command: KakaoAuthenticationCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('authenticateByKakaoUsingPOST', 'command', command)
            const localVarPath = `/api/authenticate/kakao`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 카카오 계정 정보 조회 API
         * @param {string} [kakaoAccessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKakaoAuthenticationUsingGET: async (kakaoAccessToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authenticate/kakao`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (kakaoAccessToken !== undefined) {
                localVarQueryParameter['kakaoAccessToken'] = kakaoAccessToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 카카오 계정 가입 여부 확인 API
         * @param {string} [kakaoAccessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kakaoHasSignUpUsingGET: async (kakaoAccessToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authenticate/kakao/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (kakaoAccessToken !== undefined) {
                localVarQueryParameter['kakaoAccessToken'] = kakaoAccessToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 카카오 계정 연결 API
         * @param {KakaoAuthenticationCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkKakaoUsingPOST: async (command: KakaoAuthenticationCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('linkKakaoUsingPOST', 'command', command)
            const localVarPath = `/api/authenticate/kakao/link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 카카오 계정 연결 해제 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkKakaoUsingPOST: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/authenticate/kakao/unlink`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationKakaoApi - functional programming interface
 * @export
 */
export const AuthenticationKakaoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationKakaoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 카카오 인증 API
         * @param {KakaoAuthenticationCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticateByKakaoUsingPOST(command: KakaoAuthenticationCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticateByKakaoUsingPOST(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 카카오 계정 정보 조회 API
         * @param {string} [kakaoAccessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKakaoAuthenticationUsingGET(kakaoAccessToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KakaoOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKakaoAuthenticationUsingGET(kakaoAccessToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 카카오 계정 가입 여부 확인 API
         * @param {string} [kakaoAccessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kakaoHasSignUpUsingGET(kakaoAccessToken?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KakaoJoinCheck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kakaoHasSignUpUsingGET(kakaoAccessToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 카카오 계정 연결 API
         * @param {KakaoAuthenticationCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async linkKakaoUsingPOST(command: KakaoAuthenticationCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.linkKakaoUsingPOST(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 카카오 계정 연결 해제 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkKakaoUsingPOST(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkKakaoUsingPOST(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthenticationKakaoApi - factory interface
 * @export
 */
export const AuthenticationKakaoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationKakaoApiFp(configuration)
    return {
        /**
         * 
         * @summary 카카오 인증 API
         * @param {AuthenticationKakaoApiAuthenticateByKakaoUsingPOSTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticateByKakaoUsingPOST(requestParameters: AuthenticationKakaoApiAuthenticateByKakaoUsingPOSTRequest, options?: AxiosRequestConfig): AxiosPromise<TokenOne> {
            return localVarFp.authenticateByKakaoUsingPOST(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 카카오 계정 정보 조회 API
         * @param {AuthenticationKakaoApiGetKakaoAuthenticationUsingGETRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKakaoAuthenticationUsingGET(requestParameters: AuthenticationKakaoApiGetKakaoAuthenticationUsingGETRequest = {}, options?: AxiosRequestConfig): AxiosPromise<KakaoOne> {
            return localVarFp.getKakaoAuthenticationUsingGET(requestParameters.kakaoAccessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 카카오 계정 가입 여부 확인 API
         * @param {AuthenticationKakaoApiKakaoHasSignUpUsingGETRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kakaoHasSignUpUsingGET(requestParameters: AuthenticationKakaoApiKakaoHasSignUpUsingGETRequest = {}, options?: AxiosRequestConfig): AxiosPromise<KakaoJoinCheck> {
            return localVarFp.kakaoHasSignUpUsingGET(requestParameters.kakaoAccessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 카카오 계정 연결 API
         * @param {AuthenticationKakaoApiLinkKakaoUsingPOSTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        linkKakaoUsingPOST(requestParameters: AuthenticationKakaoApiLinkKakaoUsingPOSTRequest, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.linkKakaoUsingPOST(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 카카오 계정 연결 해제 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkKakaoUsingPOST(options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.unlinkKakaoUsingPOST(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authenticateByKakaoUsingPOST operation in AuthenticationKakaoApi.
 * @export
 * @interface AuthenticationKakaoApiAuthenticateByKakaoUsingPOSTRequest
 */
export interface AuthenticationKakaoApiAuthenticateByKakaoUsingPOSTRequest {
    /**
     * command
     * @type {KakaoAuthenticationCommand}
     * @memberof AuthenticationKakaoApiAuthenticateByKakaoUsingPOST
     */
    readonly command: KakaoAuthenticationCommand
}

/**
 * Request parameters for getKakaoAuthenticationUsingGET operation in AuthenticationKakaoApi.
 * @export
 * @interface AuthenticationKakaoApiGetKakaoAuthenticationUsingGETRequest
 */
export interface AuthenticationKakaoApiGetKakaoAuthenticationUsingGETRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationKakaoApiGetKakaoAuthenticationUsingGET
     */
    readonly kakaoAccessToken?: string
}

/**
 * Request parameters for kakaoHasSignUpUsingGET operation in AuthenticationKakaoApi.
 * @export
 * @interface AuthenticationKakaoApiKakaoHasSignUpUsingGETRequest
 */
export interface AuthenticationKakaoApiKakaoHasSignUpUsingGETRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationKakaoApiKakaoHasSignUpUsingGET
     */
    readonly kakaoAccessToken?: string
}

/**
 * Request parameters for linkKakaoUsingPOST operation in AuthenticationKakaoApi.
 * @export
 * @interface AuthenticationKakaoApiLinkKakaoUsingPOSTRequest
 */
export interface AuthenticationKakaoApiLinkKakaoUsingPOSTRequest {
    /**
     * command
     * @type {KakaoAuthenticationCommand}
     * @memberof AuthenticationKakaoApiLinkKakaoUsingPOST
     */
    readonly command: KakaoAuthenticationCommand
}

/**
 * AuthenticationKakaoApi - object-oriented interface
 * @export
 * @class AuthenticationKakaoApi
 * @extends {BaseAPI}
 */
export class AuthenticationKakaoApi extends BaseAPI {
    /**
     * 
     * @summary 카카오 인증 API
     * @param {AuthenticationKakaoApiAuthenticateByKakaoUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationKakaoApi
     */
    public authenticateByKakaoUsingPOST(requestParameters: AuthenticationKakaoApiAuthenticateByKakaoUsingPOSTRequest, options?: AxiosRequestConfig) {
        return AuthenticationKakaoApiFp(this.configuration).authenticateByKakaoUsingPOST(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 카카오 계정 정보 조회 API
     * @param {AuthenticationKakaoApiGetKakaoAuthenticationUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationKakaoApi
     */
    public getKakaoAuthenticationUsingGET(requestParameters: AuthenticationKakaoApiGetKakaoAuthenticationUsingGETRequest = {}, options?: AxiosRequestConfig) {
        return AuthenticationKakaoApiFp(this.configuration).getKakaoAuthenticationUsingGET(requestParameters.kakaoAccessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 카카오 계정 가입 여부 확인 API
     * @param {AuthenticationKakaoApiKakaoHasSignUpUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationKakaoApi
     */
    public kakaoHasSignUpUsingGET(requestParameters: AuthenticationKakaoApiKakaoHasSignUpUsingGETRequest = {}, options?: AxiosRequestConfig) {
        return AuthenticationKakaoApiFp(this.configuration).kakaoHasSignUpUsingGET(requestParameters.kakaoAccessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 카카오 계정 연결 API
     * @param {AuthenticationKakaoApiLinkKakaoUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationKakaoApi
     */
    public linkKakaoUsingPOST(requestParameters: AuthenticationKakaoApiLinkKakaoUsingPOSTRequest, options?: AxiosRequestConfig) {
        return AuthenticationKakaoApiFp(this.configuration).linkKakaoUsingPOST(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 카카오 계정 연결 해제 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationKakaoApi
     */
    public unlinkKakaoUsingPOST(options?: AxiosRequestConfig) {
        return AuthenticationKakaoApiFp(this.configuration).unlinkKakaoUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CodeApi - axios parameter creator
 * @export
 */
export const CodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 코드 조회 API
         * @param {string} [parentCodeId] 상위코드ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsingGET: async (parentCodeId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (parentCodeId !== undefined) {
                localVarQueryParameter['parentCodeId'] = parentCodeId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CodeApi - functional programming interface
 * @export
 */
export const CodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 코드 조회 API
         * @param {string} [parentCodeId] 상위코드ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListUsingGET(parentCodeId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CodeOne>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListUsingGET(parentCodeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CodeApi - factory interface
 * @export
 */
export const CodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CodeApiFp(configuration)
    return {
        /**
         * 
         * @summary 코드 조회 API
         * @param {CodeApiGetListUsingGETRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsingGET(requestParameters: CodeApiGetListUsingGETRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<CodeOne>> {
            return localVarFp.getListUsingGET(requestParameters.parentCodeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getListUsingGET operation in CodeApi.
 * @export
 * @interface CodeApiGetListUsingGETRequest
 */
export interface CodeApiGetListUsingGETRequest {
    /**
     * 상위코드ID
     * @type {string}
     * @memberof CodeApiGetListUsingGET
     */
    readonly parentCodeId?: string
}

/**
 * CodeApi - object-oriented interface
 * @export
 * @class CodeApi
 * @extends {BaseAPI}
 */
export class CodeApi extends BaseAPI {
    /**
     * 
     * @summary 코드 조회 API
     * @param {CodeApiGetListUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CodeApi
     */
    public getListUsingGET(requestParameters: CodeApiGetListUsingGETRequest = {}, options?: AxiosRequestConfig) {
        return CodeApiFp(this.configuration).getListUsingGET(requestParameters.parentCodeId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 파일 다운로드
         * @summary 파일 다운로드
         * @param {string} key 파일 Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadUsingGET: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('downloadUsingGET', 'key', key)
            const localVarPath = `/api/file/download`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 파일 업로드
         * @summary 파일 업로드
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadUsingPOST: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/file/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration)
    return {
        /**
         * 파일 다운로드
         * @summary 파일 다운로드
         * @param {string} key 파일 Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadUsingGET(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadUsingGET(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 파일 업로드
         * @summary 파일 업로드
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadUsingPOST(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadUsingPOST(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FileApiFp(configuration)
    return {
        /**
         * 파일 다운로드
         * @summary 파일 다운로드
         * @param {FileApiDownloadUsingGETRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadUsingGET(requestParameters: FileApiDownloadUsingGETRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.downloadUsingGET(requestParameters.key, options).then((request) => request(axios, basePath));
        },
        /**
         * 파일 업로드
         * @summary 파일 업로드
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadUsingPOST(options?: AxiosRequestConfig): AxiosPromise<FileOne> {
            return localVarFp.downloadUsingPOST(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for downloadUsingGET operation in FileApi.
 * @export
 * @interface FileApiDownloadUsingGETRequest
 */
export interface FileApiDownloadUsingGETRequest {
    /**
     * 파일 Key
     * @type {string}
     * @memberof FileApiDownloadUsingGET
     */
    readonly key: string
}

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
    /**
     * 파일 다운로드
     * @summary 파일 다운로드
     * @param {FileApiDownloadUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public downloadUsingGET(requestParameters: FileApiDownloadUsingGETRequest, options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).downloadUsingGET(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 파일 업로드
     * @summary 파일 업로드
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    public downloadUsingPOST(options?: AxiosRequestConfig) {
        return FileApiFp(this.configuration).downloadUsingPOST(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MemberApi - axios parameter creator
 * @export
 */
export const MemberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 비밀번호 변경 API
         * @param {MemberChangePasswordCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST1: async (command: MemberChangePasswordCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('changePasswordUsingPOST1', 'command', command)
            const localVarPath = `/api/member/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 입력가능한 구직상태 코드 {\"ACTIVITY\", \"LOOKING_FOR\", \"NOT_INTERESTED\"}
         * @summary 구직 상태 변경 API
         * @param {MemberJobSearchStatusCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStatusUsingPUT: async (command: MemberJobSearchStatusCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('changeStatusUsingPUT', 'command', command)
            const localVarPath = `/api/member/job-search-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 이메일 변경 API
         * @param {MemberEmailChangeCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailUsingPUT: async (command: MemberEmailChangeCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('emailUsingPUT', 'command', command)
            const localVarPath = `/api/member/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 회원의 활동정보를 조회한다.
         * @summary 회원 활동정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/member/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 영문 이름 수정 API
         * @param {MemberEnglishNameUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEmailUsingPUT: async (command: MemberEnglishNameUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('findEmailUsingPUT', 'command', command)
            const localVarPath = `/api/member/english-name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 회원 기본 정보 조회 API
         * @summary 회원 기본 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 회원의 활동정보를 입력한다.
         * @summary 회원 활동정보 입력 API
         * @param {MemberActAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST: async (command: MemberActAddCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST', 'command', command)
            const localVarPath = `/api/member/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 비밀번호를 최초 설정할때 사용한다.
         * @summary 비밀번호 설정 API
         * @param {MemberSetPasswordCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPasswordUsingPOST: async (command: MemberSetPasswordCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('setPasswordUsingPOST', 'command', command)
            const localVarPath = `/api/member/set-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 사진 수정 API
         * @param {MemberImageUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImageUsingPUT: async (command: MemberImageUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateImageUsingPUT', 'command', command)
            const localVarPath = `/api/member/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 회원 기본정보 수정 API
         * @param {MemberUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT: async (command: MemberUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateUsingPUT', 'command', command)
            const localVarPath = `/api/member`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemberApi - functional programming interface
 * @export
 */
export const MemberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemberApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 비밀번호 변경 API
         * @param {MemberChangePasswordCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePasswordUsingPOST1(command: MemberChangePasswordCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePasswordUsingPOST1(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 입력가능한 구직상태 코드 {\"ACTIVITY\", \"LOOKING_FOR\", \"NOT_INTERESTED\"}
         * @summary 구직 상태 변경 API
         * @param {MemberJobSearchStatusCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeStatusUsingPUT(command: MemberJobSearchStatusCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeStatusUsingPUT(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 이메일 변경 API
         * @param {MemberEmailChangeCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailUsingPUT(command: MemberEmailChangeCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBasicOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailUsingPUT(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 회원의 활동정보를 조회한다.
         * @summary 회원 활동정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberActOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchOneUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 영문 이름 수정 API
         * @param {MemberEnglishNameUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findEmailUsingPUT(command: MemberEnglishNameUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBasicOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findEmailUsingPUT(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 회원 기본 정보 조회 API
         * @summary 회원 기본 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOneUsingGET(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBasicOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOneUsingGET(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 회원의 활동정보를 입력한다.
         * @summary 회원 활동정보 입력 API
         * @param {MemberActAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST(command: MemberActAddCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberActOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 비밀번호를 최초 설정할때 사용한다.
         * @summary 비밀번호 설정 API
         * @param {MemberSetPasswordCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPasswordUsingPOST(command: MemberSetPasswordCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPasswordUsingPOST(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 사진 수정 API
         * @param {MemberImageUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateImageUsingPUT(command: MemberImageUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBasicOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateImageUsingPUT(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 회원 기본정보 수정 API
         * @param {MemberUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT(command: MemberUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemberBasicOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MemberApi - factory interface
 * @export
 */
export const MemberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemberApiFp(configuration)
    return {
        /**
         * 
         * @summary 비밀번호 변경 API
         * @param {MemberApiChangePasswordUsingPOST1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsingPOST1(requestParameters: MemberApiChangePasswordUsingPOST1Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.changePasswordUsingPOST1(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 입력가능한 구직상태 코드 {\"ACTIVITY\", \"LOOKING_FOR\", \"NOT_INTERESTED\"}
         * @summary 구직 상태 변경 API
         * @param {MemberApiChangeStatusUsingPUTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStatusUsingPUT(requestParameters: MemberApiChangeStatusUsingPUTRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.changeStatusUsingPUT(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 이메일 변경 API
         * @param {MemberApiEmailUsingPUTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailUsingPUT(requestParameters: MemberApiEmailUsingPUTRequest, options?: AxiosRequestConfig): AxiosPromise<MemberBasicOne> {
            return localVarFp.emailUsingPUT(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 회원의 활동정보를 조회한다.
         * @summary 회원 활동정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUsingGET(options?: AxiosRequestConfig): AxiosPromise<MemberActOne> {
            return localVarFp.fetchOneUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 영문 이름 수정 API
         * @param {MemberApiFindEmailUsingPUTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEmailUsingPUT(requestParameters: MemberApiFindEmailUsingPUTRequest, options?: AxiosRequestConfig): AxiosPromise<MemberBasicOne> {
            return localVarFp.findEmailUsingPUT(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 회원 기본 정보 조회 API
         * @summary 회원 기본 정보 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOneUsingGET(options?: AxiosRequestConfig): AxiosPromise<MemberBasicOne> {
            return localVarFp.getOneUsingGET(options).then((request) => request(axios, basePath));
        },
        /**
         * 회원의 활동정보를 입력한다.
         * @summary 회원 활동정보 입력 API
         * @param {MemberApiSaveUsingPOSTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST(requestParameters: MemberApiSaveUsingPOSTRequest, options?: AxiosRequestConfig): AxiosPromise<MemberActOne> {
            return localVarFp.saveUsingPOST(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 비밀번호를 최초 설정할때 사용한다.
         * @summary 비밀번호 설정 API
         * @param {MemberApiSetPasswordUsingPOSTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPasswordUsingPOST(requestParameters: MemberApiSetPasswordUsingPOSTRequest, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.setPasswordUsingPOST(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 사진 수정 API
         * @param {MemberApiUpdateImageUsingPUTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateImageUsingPUT(requestParameters: MemberApiUpdateImageUsingPUTRequest, options?: AxiosRequestConfig): AxiosPromise<MemberBasicOne> {
            return localVarFp.updateImageUsingPUT(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 회원 기본정보 수정 API
         * @param {MemberApiUpdateUsingPUTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT(requestParameters: MemberApiUpdateUsingPUTRequest, options?: AxiosRequestConfig): AxiosPromise<MemberBasicOne> {
            return localVarFp.updateUsingPUT(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changePasswordUsingPOST1 operation in MemberApi.
 * @export
 * @interface MemberApiChangePasswordUsingPOST1Request
 */
export interface MemberApiChangePasswordUsingPOST1Request {
    /**
     * command
     * @type {MemberChangePasswordCommand}
     * @memberof MemberApiChangePasswordUsingPOST1
     */
    readonly command: MemberChangePasswordCommand
}

/**
 * Request parameters for changeStatusUsingPUT operation in MemberApi.
 * @export
 * @interface MemberApiChangeStatusUsingPUTRequest
 */
export interface MemberApiChangeStatusUsingPUTRequest {
    /**
     * command
     * @type {MemberJobSearchStatusCommand}
     * @memberof MemberApiChangeStatusUsingPUT
     */
    readonly command: MemberJobSearchStatusCommand
}

/**
 * Request parameters for emailUsingPUT operation in MemberApi.
 * @export
 * @interface MemberApiEmailUsingPUTRequest
 */
export interface MemberApiEmailUsingPUTRequest {
    /**
     * command
     * @type {MemberEmailChangeCommand}
     * @memberof MemberApiEmailUsingPUT
     */
    readonly command: MemberEmailChangeCommand
}

/**
 * Request parameters for findEmailUsingPUT operation in MemberApi.
 * @export
 * @interface MemberApiFindEmailUsingPUTRequest
 */
export interface MemberApiFindEmailUsingPUTRequest {
    /**
     * command
     * @type {MemberEnglishNameUpdateCommand}
     * @memberof MemberApiFindEmailUsingPUT
     */
    readonly command: MemberEnglishNameUpdateCommand
}

/**
 * Request parameters for saveUsingPOST operation in MemberApi.
 * @export
 * @interface MemberApiSaveUsingPOSTRequest
 */
export interface MemberApiSaveUsingPOSTRequest {
    /**
     * command
     * @type {MemberActAddCommand}
     * @memberof MemberApiSaveUsingPOST
     */
    readonly command: MemberActAddCommand
}

/**
 * Request parameters for setPasswordUsingPOST operation in MemberApi.
 * @export
 * @interface MemberApiSetPasswordUsingPOSTRequest
 */
export interface MemberApiSetPasswordUsingPOSTRequest {
    /**
     * command
     * @type {MemberSetPasswordCommand}
     * @memberof MemberApiSetPasswordUsingPOST
     */
    readonly command: MemberSetPasswordCommand
}

/**
 * Request parameters for updateImageUsingPUT operation in MemberApi.
 * @export
 * @interface MemberApiUpdateImageUsingPUTRequest
 */
export interface MemberApiUpdateImageUsingPUTRequest {
    /**
     * command
     * @type {MemberImageUpdateCommand}
     * @memberof MemberApiUpdateImageUsingPUT
     */
    readonly command: MemberImageUpdateCommand
}

/**
 * Request parameters for updateUsingPUT operation in MemberApi.
 * @export
 * @interface MemberApiUpdateUsingPUTRequest
 */
export interface MemberApiUpdateUsingPUTRequest {
    /**
     * command
     * @type {MemberUpdateCommand}
     * @memberof MemberApiUpdateUsingPUT
     */
    readonly command: MemberUpdateCommand
}

/**
 * MemberApi - object-oriented interface
 * @export
 * @class MemberApi
 * @extends {BaseAPI}
 */
export class MemberApi extends BaseAPI {
    /**
     * 
     * @summary 비밀번호 변경 API
     * @param {MemberApiChangePasswordUsingPOST1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public changePasswordUsingPOST1(requestParameters: MemberApiChangePasswordUsingPOST1Request, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).changePasswordUsingPOST1(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 입력가능한 구직상태 코드 {\"ACTIVITY\", \"LOOKING_FOR\", \"NOT_INTERESTED\"}
     * @summary 구직 상태 변경 API
     * @param {MemberApiChangeStatusUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public changeStatusUsingPUT(requestParameters: MemberApiChangeStatusUsingPUTRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).changeStatusUsingPUT(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 이메일 변경 API
     * @param {MemberApiEmailUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public emailUsingPUT(requestParameters: MemberApiEmailUsingPUTRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).emailUsingPUT(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 회원의 활동정보를 조회한다.
     * @summary 회원 활동정보 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public fetchOneUsingGET(options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).fetchOneUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 영문 이름 수정 API
     * @param {MemberApiFindEmailUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public findEmailUsingPUT(requestParameters: MemberApiFindEmailUsingPUTRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).findEmailUsingPUT(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 회원 기본 정보 조회 API
     * @summary 회원 기본 정보 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public getOneUsingGET(options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).getOneUsingGET(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 회원의 활동정보를 입력한다.
     * @summary 회원 활동정보 입력 API
     * @param {MemberApiSaveUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public saveUsingPOST(requestParameters: MemberApiSaveUsingPOSTRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).saveUsingPOST(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 비밀번호를 최초 설정할때 사용한다.
     * @summary 비밀번호 설정 API
     * @param {MemberApiSetPasswordUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public setPasswordUsingPOST(requestParameters: MemberApiSetPasswordUsingPOSTRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).setPasswordUsingPOST(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 사진 수정 API
     * @param {MemberApiUpdateImageUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public updateImageUsingPUT(requestParameters: MemberApiUpdateImageUsingPUTRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateImageUsingPUT(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 회원 기본정보 수정 API
     * @param {MemberApiUpdateUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemberApi
     */
    public updateUsingPUT(requestParameters: MemberApiUpdateUsingPUTRequest, options?: AxiosRequestConfig) {
        return MemberApiFp(this.configuration).updateUsingPUT(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 프로필 조회 API (PDF 다운로드용)
         * @summary 프로필 조회 API (PDF 다운로드용)
         * @param {Array<number>} [awards] 
         * @param {Array<number>} [educations] 
         * @param {Array<number>} [language] 
         * @param {Array<number>} [licenses] 
         * @param {Array<number>} [organizations] 
         * @param {Array<number>} [portfolios] 
         * @param {Array<number>} [projects] 
         * @param {Array<number>} [skills] 
         * @param {string} [type] 
         * @param {Array<number>} [volunteering] 
         * @param {Array<number>} [workExperiences] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchForPdfUsingGET: async (awards?: Array<number>, educations?: Array<number>, language?: Array<number>, licenses?: Array<number>, organizations?: Array<number>, portfolios?: Array<number>, projects?: Array<number>, skills?: Array<number>, type?: string, volunteering?: Array<number>, workExperiences?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/profile/pdf`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (awards) {
                localVarQueryParameter['awards'] = awards;
            }

            if (educations) {
                localVarQueryParameter['educations'] = educations;
            }

            if (language) {
                localVarQueryParameter['language'] = language;
            }

            if (licenses) {
                localVarQueryParameter['licenses'] = licenses;
            }

            if (organizations) {
                localVarQueryParameter['organizations'] = organizations;
            }

            if (portfolios) {
                localVarQueryParameter['portfolios'] = portfolios;
            }

            if (projects) {
                localVarQueryParameter['projects'] = projects;
            }

            if (skills) {
                localVarQueryParameter['skills'] = skills;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (volunteering) {
                localVarQueryParameter['volunteering'] = volunteering;
            }

            if (workExperiences) {
                localVarQueryParameter['workExperiences'] = workExperiences;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 조회 API
         * @summary 프로필 조회 API
         * @param {string} type 프로필 유형
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET: async (type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('fetchUsingGET', 'type', type)
            const localVarPath = `/api/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 프로필 조회 API (PDF 다운로드용)
         * @summary 프로필 조회 API (PDF 다운로드용)
         * @param {Array<number>} [awards] 
         * @param {Array<number>} [educations] 
         * @param {Array<number>} [language] 
         * @param {Array<number>} [licenses] 
         * @param {Array<number>} [organizations] 
         * @param {Array<number>} [portfolios] 
         * @param {Array<number>} [projects] 
         * @param {Array<number>} [skills] 
         * @param {string} [type] 
         * @param {Array<number>} [volunteering] 
         * @param {Array<number>} [workExperiences] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchForPdfUsingGET(awards?: Array<number>, educations?: Array<number>, language?: Array<number>, licenses?: Array<number>, organizations?: Array<number>, portfolios?: Array<number>, projects?: Array<number>, skills?: Array<number>, type?: string, volunteering?: Array<number>, workExperiences?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchForPdfUsingGET(awards, educations, language, licenses, organizations, portfolios, projects, skills, type, volunteering, workExperiences, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 조회 API
         * @summary 프로필 조회 API
         * @param {string} type 프로필 유형
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUsingGET(type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsingGET(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * 프로필 조회 API (PDF 다운로드용)
         * @summary 프로필 조회 API (PDF 다운로드용)
         * @param {ProfileApiFetchForPdfUsingGETRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchForPdfUsingGET(requestParameters: ProfileApiFetchForPdfUsingGETRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ProfileOne> {
            return localVarFp.fetchForPdfUsingGET(requestParameters.awards, requestParameters.educations, requestParameters.language, requestParameters.licenses, requestParameters.organizations, requestParameters.portfolios, requestParameters.projects, requestParameters.skills, requestParameters.type, requestParameters.volunteering, requestParameters.workExperiences, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 조회 API
         * @summary 프로필 조회 API
         * @param {ProfileApiFetchUsingGETRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET(requestParameters: ProfileApiFetchUsingGETRequest, options?: AxiosRequestConfig): AxiosPromise<ProfileOne> {
            return localVarFp.fetchUsingGET(requestParameters.type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fetchForPdfUsingGET operation in ProfileApi.
 * @export
 * @interface ProfileApiFetchForPdfUsingGETRequest
 */
export interface ProfileApiFetchForPdfUsingGETRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof ProfileApiFetchForPdfUsingGET
     */
    readonly awards?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof ProfileApiFetchForPdfUsingGET
     */
    readonly educations?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof ProfileApiFetchForPdfUsingGET
     */
    readonly language?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof ProfileApiFetchForPdfUsingGET
     */
    readonly licenses?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof ProfileApiFetchForPdfUsingGET
     */
    readonly organizations?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof ProfileApiFetchForPdfUsingGET
     */
    readonly portfolios?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof ProfileApiFetchForPdfUsingGET
     */
    readonly projects?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof ProfileApiFetchForPdfUsingGET
     */
    readonly skills?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ProfileApiFetchForPdfUsingGET
     */
    readonly type?: string

    /**
     * 
     * @type {Array<number>}
     * @memberof ProfileApiFetchForPdfUsingGET
     */
    readonly volunteering?: Array<number>

    /**
     * 
     * @type {Array<number>}
     * @memberof ProfileApiFetchForPdfUsingGET
     */
    readonly workExperiences?: Array<number>
}

/**
 * Request parameters for fetchUsingGET operation in ProfileApi.
 * @export
 * @interface ProfileApiFetchUsingGETRequest
 */
export interface ProfileApiFetchUsingGETRequest {
    /**
     * 프로필 유형
     * @type {string}
     * @memberof ProfileApiFetchUsingGET
     */
    readonly type: string
}

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * 프로필 조회 API (PDF 다운로드용)
     * @summary 프로필 조회 API (PDF 다운로드용)
     * @param {ProfileApiFetchForPdfUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public fetchForPdfUsingGET(requestParameters: ProfileApiFetchForPdfUsingGETRequest = {}, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).fetchForPdfUsingGET(requestParameters.awards, requestParameters.educations, requestParameters.language, requestParameters.licenses, requestParameters.organizations, requestParameters.portfolios, requestParameters.projects, requestParameters.skills, requestParameters.type, requestParameters.volunteering, requestParameters.workExperiences, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 조회 API
     * @summary 프로필 조회 API
     * @param {ProfileApiFetchUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public fetchUsingGET(requestParameters: ProfileApiFetchUsingGETRequest, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).fetchUsingGET(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileAwardApi - axios parameter creator
 * @export
 */
export const ProfileAwardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 프로필 (수상) 삭제 API
         * @summary 프로필 (수상) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteUsingDELETE', 'seq', seq)
            const localVarPath = `/api/profile/award/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (수상) 조회 API
         * @summary 프로필 (수상) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET1: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('fetchUsingGET1', 'seq', seq)
            const localVarPath = `/api/profile/award/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (수상) 등록 API
         * @summary 프로필 (수상) 등록 API
         * @param {ProfileAwardAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST1: async (command: ProfileAwardAddCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST1', 'command', command)
            const localVarPath = `/api/profile/award`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (수상) 수정 API
         * @summary 프로필 (수상) 수정 API
         * @param {ProfileAwardUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT1: async (command: ProfileAwardUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateUsingPUT1', 'command', command)
            const localVarPath = `/api/profile/award`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileAwardApi - functional programming interface
 * @export
 */
export const ProfileAwardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileAwardApiAxiosParamCreator(configuration)
    return {
        /**
         * 프로필 (수상) 삭제 API
         * @summary 프로필 (수상) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (수상) 조회 API
         * @summary 프로필 (수상) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUsingGET1(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileAwardOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsingGET1(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (수상) 등록 API
         * @summary 프로필 (수상) 등록 API
         * @param {ProfileAwardAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST1(command: ProfileAwardAddCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileAwardOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST1(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (수상) 수정 API
         * @summary 프로필 (수상) 수정 API
         * @param {ProfileAwardUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT1(command: ProfileAwardUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileAwardOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT1(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileAwardApi - factory interface
 * @export
 */
export const ProfileAwardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileAwardApiFp(configuration)
    return {
        /**
         * 프로필 (수상) 삭제 API
         * @summary 프로필 (수상) 삭제 API
         * @param {ProfileAwardApiDeleteUsingDELETERequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(requestParameters: ProfileAwardApiDeleteUsingDELETERequest, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.deleteUsingDELETE(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (수상) 조회 API
         * @summary 프로필 (수상) 조회 API
         * @param {ProfileAwardApiFetchUsingGET1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET1(requestParameters: ProfileAwardApiFetchUsingGET1Request, options?: AxiosRequestConfig): AxiosPromise<ProfileAwardOne> {
            return localVarFp.fetchUsingGET1(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (수상) 등록 API
         * @summary 프로필 (수상) 등록 API
         * @param {ProfileAwardApiSaveUsingPOST1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST1(requestParameters: ProfileAwardApiSaveUsingPOST1Request, options?: AxiosRequestConfig): AxiosPromise<ProfileAwardOne> {
            return localVarFp.saveUsingPOST1(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (수상) 수정 API
         * @summary 프로필 (수상) 수정 API
         * @param {ProfileAwardApiUpdateUsingPUT1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT1(requestParameters: ProfileAwardApiUpdateUsingPUT1Request, options?: AxiosRequestConfig): AxiosPromise<ProfileAwardOne> {
            return localVarFp.updateUsingPUT1(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsingDELETE operation in ProfileAwardApi.
 * @export
 * @interface ProfileAwardApiDeleteUsingDELETERequest
 */
export interface ProfileAwardApiDeleteUsingDELETERequest {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileAwardApiDeleteUsingDELETE
     */
    readonly seq: number
}

/**
 * Request parameters for fetchUsingGET1 operation in ProfileAwardApi.
 * @export
 * @interface ProfileAwardApiFetchUsingGET1Request
 */
export interface ProfileAwardApiFetchUsingGET1Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileAwardApiFetchUsingGET1
     */
    readonly seq: number
}

/**
 * Request parameters for saveUsingPOST1 operation in ProfileAwardApi.
 * @export
 * @interface ProfileAwardApiSaveUsingPOST1Request
 */
export interface ProfileAwardApiSaveUsingPOST1Request {
    /**
     * command
     * @type {ProfileAwardAddCommand}
     * @memberof ProfileAwardApiSaveUsingPOST1
     */
    readonly command: ProfileAwardAddCommand
}

/**
 * Request parameters for updateUsingPUT1 operation in ProfileAwardApi.
 * @export
 * @interface ProfileAwardApiUpdateUsingPUT1Request
 */
export interface ProfileAwardApiUpdateUsingPUT1Request {
    /**
     * command
     * @type {ProfileAwardUpdateCommand}
     * @memberof ProfileAwardApiUpdateUsingPUT1
     */
    readonly command: ProfileAwardUpdateCommand
}

/**
 * ProfileAwardApi - object-oriented interface
 * @export
 * @class ProfileAwardApi
 * @extends {BaseAPI}
 */
export class ProfileAwardApi extends BaseAPI {
    /**
     * 프로필 (수상) 삭제 API
     * @summary 프로필 (수상) 삭제 API
     * @param {ProfileAwardApiDeleteUsingDELETERequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileAwardApi
     */
    public deleteUsingDELETE(requestParameters: ProfileAwardApiDeleteUsingDELETERequest, options?: AxiosRequestConfig) {
        return ProfileAwardApiFp(this.configuration).deleteUsingDELETE(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (수상) 조회 API
     * @summary 프로필 (수상) 조회 API
     * @param {ProfileAwardApiFetchUsingGET1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileAwardApi
     */
    public fetchUsingGET1(requestParameters: ProfileAwardApiFetchUsingGET1Request, options?: AxiosRequestConfig) {
        return ProfileAwardApiFp(this.configuration).fetchUsingGET1(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (수상) 등록 API
     * @summary 프로필 (수상) 등록 API
     * @param {ProfileAwardApiSaveUsingPOST1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileAwardApi
     */
    public saveUsingPOST1(requestParameters: ProfileAwardApiSaveUsingPOST1Request, options?: AxiosRequestConfig) {
        return ProfileAwardApiFp(this.configuration).saveUsingPOST1(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (수상) 수정 API
     * @summary 프로필 (수상) 수정 API
     * @param {ProfileAwardApiUpdateUsingPUT1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileAwardApi
     */
    public updateUsingPUT1(requestParameters: ProfileAwardApiUpdateUsingPUT1Request, options?: AxiosRequestConfig) {
        return ProfileAwardApiFp(this.configuration).updateUsingPUT1(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileEducationApi - axios parameter creator
 * @export
 */
export const ProfileEducationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 프로필 (학력) 삭제 API
         * @summary 프로필 (학력) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteUsingDELETE1', 'seq', seq)
            const localVarPath = `/api/profile/education/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (학력) 조회 API
         * @summary 프로필 (학력) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET2: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('fetchUsingGET2', 'seq', seq)
            const localVarPath = `/api/profile/education/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (학력) 등록 API
         * @summary 프로필 (학력) 등록 API
         * @param {ProfileEducationAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST2: async (command: ProfileEducationAddCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST2', 'command', command)
            const localVarPath = `/api/profile/education`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (학력) 수정 API
         * @summary 프로필 (학력) 수정 API
         * @param {ProfileEducationUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT2: async (command: ProfileEducationUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateUsingPUT2', 'command', command)
            const localVarPath = `/api/profile/education`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileEducationApi - functional programming interface
 * @export
 */
export const ProfileEducationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileEducationApiAxiosParamCreator(configuration)
    return {
        /**
         * 프로필 (학력) 삭제 API
         * @summary 프로필 (학력) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE1(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE1(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (학력) 조회 API
         * @summary 프로필 (학력) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUsingGET2(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileEducationOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsingGET2(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (학력) 등록 API
         * @summary 프로필 (학력) 등록 API
         * @param {ProfileEducationAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST2(command: ProfileEducationAddCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileEducationOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST2(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (학력) 수정 API
         * @summary 프로필 (학력) 수정 API
         * @param {ProfileEducationUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT2(command: ProfileEducationUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileEducationOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT2(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileEducationApi - factory interface
 * @export
 */
export const ProfileEducationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileEducationApiFp(configuration)
    return {
        /**
         * 프로필 (학력) 삭제 API
         * @summary 프로필 (학력) 삭제 API
         * @param {ProfileEducationApiDeleteUsingDELETE1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(requestParameters: ProfileEducationApiDeleteUsingDELETE1Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.deleteUsingDELETE1(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (학력) 조회 API
         * @summary 프로필 (학력) 조회 API
         * @param {ProfileEducationApiFetchUsingGET2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET2(requestParameters: ProfileEducationApiFetchUsingGET2Request, options?: AxiosRequestConfig): AxiosPromise<ProfileEducationOne> {
            return localVarFp.fetchUsingGET2(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (학력) 등록 API
         * @summary 프로필 (학력) 등록 API
         * @param {ProfileEducationApiSaveUsingPOST2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST2(requestParameters: ProfileEducationApiSaveUsingPOST2Request, options?: AxiosRequestConfig): AxiosPromise<ProfileEducationOne> {
            return localVarFp.saveUsingPOST2(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (학력) 수정 API
         * @summary 프로필 (학력) 수정 API
         * @param {ProfileEducationApiUpdateUsingPUT2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT2(requestParameters: ProfileEducationApiUpdateUsingPUT2Request, options?: AxiosRequestConfig): AxiosPromise<ProfileEducationOne> {
            return localVarFp.updateUsingPUT2(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsingDELETE1 operation in ProfileEducationApi.
 * @export
 * @interface ProfileEducationApiDeleteUsingDELETE1Request
 */
export interface ProfileEducationApiDeleteUsingDELETE1Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileEducationApiDeleteUsingDELETE1
     */
    readonly seq: number
}

/**
 * Request parameters for fetchUsingGET2 operation in ProfileEducationApi.
 * @export
 * @interface ProfileEducationApiFetchUsingGET2Request
 */
export interface ProfileEducationApiFetchUsingGET2Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileEducationApiFetchUsingGET2
     */
    readonly seq: number
}

/**
 * Request parameters for saveUsingPOST2 operation in ProfileEducationApi.
 * @export
 * @interface ProfileEducationApiSaveUsingPOST2Request
 */
export interface ProfileEducationApiSaveUsingPOST2Request {
    /**
     * command
     * @type {ProfileEducationAddCommand}
     * @memberof ProfileEducationApiSaveUsingPOST2
     */
    readonly command: ProfileEducationAddCommand
}

/**
 * Request parameters for updateUsingPUT2 operation in ProfileEducationApi.
 * @export
 * @interface ProfileEducationApiUpdateUsingPUT2Request
 */
export interface ProfileEducationApiUpdateUsingPUT2Request {
    /**
     * command
     * @type {ProfileEducationUpdateCommand}
     * @memberof ProfileEducationApiUpdateUsingPUT2
     */
    readonly command: ProfileEducationUpdateCommand
}

/**
 * ProfileEducationApi - object-oriented interface
 * @export
 * @class ProfileEducationApi
 * @extends {BaseAPI}
 */
export class ProfileEducationApi extends BaseAPI {
    /**
     * 프로필 (학력) 삭제 API
     * @summary 프로필 (학력) 삭제 API
     * @param {ProfileEducationApiDeleteUsingDELETE1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileEducationApi
     */
    public deleteUsingDELETE1(requestParameters: ProfileEducationApiDeleteUsingDELETE1Request, options?: AxiosRequestConfig) {
        return ProfileEducationApiFp(this.configuration).deleteUsingDELETE1(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (학력) 조회 API
     * @summary 프로필 (학력) 조회 API
     * @param {ProfileEducationApiFetchUsingGET2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileEducationApi
     */
    public fetchUsingGET2(requestParameters: ProfileEducationApiFetchUsingGET2Request, options?: AxiosRequestConfig) {
        return ProfileEducationApiFp(this.configuration).fetchUsingGET2(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (학력) 등록 API
     * @summary 프로필 (학력) 등록 API
     * @param {ProfileEducationApiSaveUsingPOST2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileEducationApi
     */
    public saveUsingPOST2(requestParameters: ProfileEducationApiSaveUsingPOST2Request, options?: AxiosRequestConfig) {
        return ProfileEducationApiFp(this.configuration).saveUsingPOST2(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (학력) 수정 API
     * @summary 프로필 (학력) 수정 API
     * @param {ProfileEducationApiUpdateUsingPUT2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileEducationApi
     */
    public updateUsingPUT2(requestParameters: ProfileEducationApiUpdateUsingPUT2Request, options?: AxiosRequestConfig) {
        return ProfileEducationApiFp(this.configuration).updateUsingPUT2(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileLanguageApi - axios parameter creator
 * @export
 */
export const ProfileLanguageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 프로필 (언어) 삭제 API
         * @summary 프로필 (외국어) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteUsingDELETE2', 'seq', seq)
            const localVarPath = `/api/profile/language/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (외국어) 조회 API
         * @summary 프로필 (외국어) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET3: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('fetchUsingGET3', 'seq', seq)
            const localVarPath = `/api/profile/language/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (외국어) 등록 API
         * @summary 프로필 (외국어) 등록 API
         * @param {ProfileLanguageAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST3: async (command: ProfileLanguageAddCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST3', 'command', command)
            const localVarPath = `/api/profile/language`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (외국어) 수정 API
         * @summary 프로필 (외국어) 수정 API
         * @param {ProfileLanguageUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT3: async (command: ProfileLanguageUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateUsingPUT3', 'command', command)
            const localVarPath = `/api/profile/language`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileLanguageApi - functional programming interface
 * @export
 */
export const ProfileLanguageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileLanguageApiAxiosParamCreator(configuration)
    return {
        /**
         * 프로필 (언어) 삭제 API
         * @summary 프로필 (외국어) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE2(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE2(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (외국어) 조회 API
         * @summary 프로필 (외국어) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUsingGET3(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileLanguageOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsingGET3(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (외국어) 등록 API
         * @summary 프로필 (외국어) 등록 API
         * @param {ProfileLanguageAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST3(command: ProfileLanguageAddCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileLanguageOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST3(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (외국어) 수정 API
         * @summary 프로필 (외국어) 수정 API
         * @param {ProfileLanguageUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT3(command: ProfileLanguageUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileLanguageOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT3(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileLanguageApi - factory interface
 * @export
 */
export const ProfileLanguageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileLanguageApiFp(configuration)
    return {
        /**
         * 프로필 (언어) 삭제 API
         * @summary 프로필 (외국어) 삭제 API
         * @param {ProfileLanguageApiDeleteUsingDELETE2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(requestParameters: ProfileLanguageApiDeleteUsingDELETE2Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.deleteUsingDELETE2(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (외국어) 조회 API
         * @summary 프로필 (외국어) 조회 API
         * @param {ProfileLanguageApiFetchUsingGET3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET3(requestParameters: ProfileLanguageApiFetchUsingGET3Request, options?: AxiosRequestConfig): AxiosPromise<ProfileLanguageOne> {
            return localVarFp.fetchUsingGET3(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (외국어) 등록 API
         * @summary 프로필 (외국어) 등록 API
         * @param {ProfileLanguageApiSaveUsingPOST3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST3(requestParameters: ProfileLanguageApiSaveUsingPOST3Request, options?: AxiosRequestConfig): AxiosPromise<ProfileLanguageOne> {
            return localVarFp.saveUsingPOST3(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (외국어) 수정 API
         * @summary 프로필 (외국어) 수정 API
         * @param {ProfileLanguageApiUpdateUsingPUT3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT3(requestParameters: ProfileLanguageApiUpdateUsingPUT3Request, options?: AxiosRequestConfig): AxiosPromise<ProfileLanguageOne> {
            return localVarFp.updateUsingPUT3(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsingDELETE2 operation in ProfileLanguageApi.
 * @export
 * @interface ProfileLanguageApiDeleteUsingDELETE2Request
 */
export interface ProfileLanguageApiDeleteUsingDELETE2Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileLanguageApiDeleteUsingDELETE2
     */
    readonly seq: number
}

/**
 * Request parameters for fetchUsingGET3 operation in ProfileLanguageApi.
 * @export
 * @interface ProfileLanguageApiFetchUsingGET3Request
 */
export interface ProfileLanguageApiFetchUsingGET3Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileLanguageApiFetchUsingGET3
     */
    readonly seq: number
}

/**
 * Request parameters for saveUsingPOST3 operation in ProfileLanguageApi.
 * @export
 * @interface ProfileLanguageApiSaveUsingPOST3Request
 */
export interface ProfileLanguageApiSaveUsingPOST3Request {
    /**
     * command
     * @type {ProfileLanguageAddCommand}
     * @memberof ProfileLanguageApiSaveUsingPOST3
     */
    readonly command: ProfileLanguageAddCommand
}

/**
 * Request parameters for updateUsingPUT3 operation in ProfileLanguageApi.
 * @export
 * @interface ProfileLanguageApiUpdateUsingPUT3Request
 */
export interface ProfileLanguageApiUpdateUsingPUT3Request {
    /**
     * command
     * @type {ProfileLanguageUpdateCommand}
     * @memberof ProfileLanguageApiUpdateUsingPUT3
     */
    readonly command: ProfileLanguageUpdateCommand
}

/**
 * ProfileLanguageApi - object-oriented interface
 * @export
 * @class ProfileLanguageApi
 * @extends {BaseAPI}
 */
export class ProfileLanguageApi extends BaseAPI {
    /**
     * 프로필 (언어) 삭제 API
     * @summary 프로필 (외국어) 삭제 API
     * @param {ProfileLanguageApiDeleteUsingDELETE2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileLanguageApi
     */
    public deleteUsingDELETE2(requestParameters: ProfileLanguageApiDeleteUsingDELETE2Request, options?: AxiosRequestConfig) {
        return ProfileLanguageApiFp(this.configuration).deleteUsingDELETE2(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (외국어) 조회 API
     * @summary 프로필 (외국어) 조회 API
     * @param {ProfileLanguageApiFetchUsingGET3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileLanguageApi
     */
    public fetchUsingGET3(requestParameters: ProfileLanguageApiFetchUsingGET3Request, options?: AxiosRequestConfig) {
        return ProfileLanguageApiFp(this.configuration).fetchUsingGET3(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (외국어) 등록 API
     * @summary 프로필 (외국어) 등록 API
     * @param {ProfileLanguageApiSaveUsingPOST3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileLanguageApi
     */
    public saveUsingPOST3(requestParameters: ProfileLanguageApiSaveUsingPOST3Request, options?: AxiosRequestConfig) {
        return ProfileLanguageApiFp(this.configuration).saveUsingPOST3(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (외국어) 수정 API
     * @summary 프로필 (외국어) 수정 API
     * @param {ProfileLanguageApiUpdateUsingPUT3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileLanguageApi
     */
    public updateUsingPUT3(requestParameters: ProfileLanguageApiUpdateUsingPUT3Request, options?: AxiosRequestConfig) {
        return ProfileLanguageApiFp(this.configuration).updateUsingPUT3(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileLicenseApi - axios parameter creator
 * @export
 */
export const ProfileLicenseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 프로필 (자격증/수료증) 삭제 API
         * @summary 프로필 (자격증/수료증) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteUsingDELETE3', 'seq', seq)
            const localVarPath = `/api/profile/license/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (자격증/수료증) 조회 API
         * @summary 프로필 (자격증/수료증) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET4: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('fetchUsingGET4', 'seq', seq)
            const localVarPath = `/api/profile/license/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (자격증/수료증) 등록 API
         * @summary 프로필 (자격증/수료증) 등록 API
         * @param {ProfileLicenseAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST4: async (command: ProfileLicenseAddCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST4', 'command', command)
            const localVarPath = `/api/profile/license`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (자격증/수료증) 수정 API
         * @summary 프로필 (자격증/수료증) 수정 API
         * @param {ProfileLicenseUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT4: async (command: ProfileLicenseUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateUsingPUT4', 'command', command)
            const localVarPath = `/api/profile/license`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileLicenseApi - functional programming interface
 * @export
 */
export const ProfileLicenseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileLicenseApiAxiosParamCreator(configuration)
    return {
        /**
         * 프로필 (자격증/수료증) 삭제 API
         * @summary 프로필 (자격증/수료증) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE3(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE3(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (자격증/수료증) 조회 API
         * @summary 프로필 (자격증/수료증) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUsingGET4(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileLicenseOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsingGET4(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (자격증/수료증) 등록 API
         * @summary 프로필 (자격증/수료증) 등록 API
         * @param {ProfileLicenseAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST4(command: ProfileLicenseAddCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileLicenseOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST4(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (자격증/수료증) 수정 API
         * @summary 프로필 (자격증/수료증) 수정 API
         * @param {ProfileLicenseUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT4(command: ProfileLicenseUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileLicenseOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT4(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileLicenseApi - factory interface
 * @export
 */
export const ProfileLicenseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileLicenseApiFp(configuration)
    return {
        /**
         * 프로필 (자격증/수료증) 삭제 API
         * @summary 프로필 (자격증/수료증) 삭제 API
         * @param {ProfileLicenseApiDeleteUsingDELETE3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3(requestParameters: ProfileLicenseApiDeleteUsingDELETE3Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.deleteUsingDELETE3(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (자격증/수료증) 조회 API
         * @summary 프로필 (자격증/수료증) 조회 API
         * @param {ProfileLicenseApiFetchUsingGET4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET4(requestParameters: ProfileLicenseApiFetchUsingGET4Request, options?: AxiosRequestConfig): AxiosPromise<ProfileLicenseOne> {
            return localVarFp.fetchUsingGET4(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (자격증/수료증) 등록 API
         * @summary 프로필 (자격증/수료증) 등록 API
         * @param {ProfileLicenseApiSaveUsingPOST4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST4(requestParameters: ProfileLicenseApiSaveUsingPOST4Request, options?: AxiosRequestConfig): AxiosPromise<ProfileLicenseOne> {
            return localVarFp.saveUsingPOST4(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (자격증/수료증) 수정 API
         * @summary 프로필 (자격증/수료증) 수정 API
         * @param {ProfileLicenseApiUpdateUsingPUT4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT4(requestParameters: ProfileLicenseApiUpdateUsingPUT4Request, options?: AxiosRequestConfig): AxiosPromise<ProfileLicenseOne> {
            return localVarFp.updateUsingPUT4(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsingDELETE3 operation in ProfileLicenseApi.
 * @export
 * @interface ProfileLicenseApiDeleteUsingDELETE3Request
 */
export interface ProfileLicenseApiDeleteUsingDELETE3Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileLicenseApiDeleteUsingDELETE3
     */
    readonly seq: number
}

/**
 * Request parameters for fetchUsingGET4 operation in ProfileLicenseApi.
 * @export
 * @interface ProfileLicenseApiFetchUsingGET4Request
 */
export interface ProfileLicenseApiFetchUsingGET4Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileLicenseApiFetchUsingGET4
     */
    readonly seq: number
}

/**
 * Request parameters for saveUsingPOST4 operation in ProfileLicenseApi.
 * @export
 * @interface ProfileLicenseApiSaveUsingPOST4Request
 */
export interface ProfileLicenseApiSaveUsingPOST4Request {
    /**
     * command
     * @type {ProfileLicenseAddCommand}
     * @memberof ProfileLicenseApiSaveUsingPOST4
     */
    readonly command: ProfileLicenseAddCommand
}

/**
 * Request parameters for updateUsingPUT4 operation in ProfileLicenseApi.
 * @export
 * @interface ProfileLicenseApiUpdateUsingPUT4Request
 */
export interface ProfileLicenseApiUpdateUsingPUT4Request {
    /**
     * command
     * @type {ProfileLicenseUpdateCommand}
     * @memberof ProfileLicenseApiUpdateUsingPUT4
     */
    readonly command: ProfileLicenseUpdateCommand
}

/**
 * ProfileLicenseApi - object-oriented interface
 * @export
 * @class ProfileLicenseApi
 * @extends {BaseAPI}
 */
export class ProfileLicenseApi extends BaseAPI {
    /**
     * 프로필 (자격증/수료증) 삭제 API
     * @summary 프로필 (자격증/수료증) 삭제 API
     * @param {ProfileLicenseApiDeleteUsingDELETE3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileLicenseApi
     */
    public deleteUsingDELETE3(requestParameters: ProfileLicenseApiDeleteUsingDELETE3Request, options?: AxiosRequestConfig) {
        return ProfileLicenseApiFp(this.configuration).deleteUsingDELETE3(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (자격증/수료증) 조회 API
     * @summary 프로필 (자격증/수료증) 조회 API
     * @param {ProfileLicenseApiFetchUsingGET4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileLicenseApi
     */
    public fetchUsingGET4(requestParameters: ProfileLicenseApiFetchUsingGET4Request, options?: AxiosRequestConfig) {
        return ProfileLicenseApiFp(this.configuration).fetchUsingGET4(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (자격증/수료증) 등록 API
     * @summary 프로필 (자격증/수료증) 등록 API
     * @param {ProfileLicenseApiSaveUsingPOST4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileLicenseApi
     */
    public saveUsingPOST4(requestParameters: ProfileLicenseApiSaveUsingPOST4Request, options?: AxiosRequestConfig) {
        return ProfileLicenseApiFp(this.configuration).saveUsingPOST4(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (자격증/수료증) 수정 API
     * @summary 프로필 (자격증/수료증) 수정 API
     * @param {ProfileLicenseApiUpdateUsingPUT4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileLicenseApi
     */
    public updateUsingPUT4(requestParameters: ProfileLicenseApiUpdateUsingPUT4Request, options?: AxiosRequestConfig) {
        return ProfileLicenseApiFp(this.configuration).updateUsingPUT4(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileOrganizationApi - axios parameter creator
 * @export
 */
export const ProfileOrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 프로필 (대외활동) 삭제 API
         * @summary 프로필 (대외활동) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE4: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteUsingDELETE4', 'seq', seq)
            const localVarPath = `/api/profile/organization/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (대외활동) 조회 API
         * @summary 프로필 (대외활동) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET5: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('fetchUsingGET5', 'seq', seq)
            const localVarPath = `/api/profile/organization/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (대외활동) 등록 API
         * @summary 프로필 (대외활동) 등록 API
         * @param {ProfileOrganizationAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST5: async (command: ProfileOrganizationAddCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST5', 'command', command)
            const localVarPath = `/api/profile/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (대외활동) 수정 API
         * @summary 프로필 (대외활동) 수정 API
         * @param {ProfileOrganizationUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT5: async (command: ProfileOrganizationUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateUsingPUT5', 'command', command)
            const localVarPath = `/api/profile/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileOrganizationApi - functional programming interface
 * @export
 */
export const ProfileOrganizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileOrganizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 프로필 (대외활동) 삭제 API
         * @summary 프로필 (대외활동) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE4(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE4(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (대외활동) 조회 API
         * @summary 프로필 (대외활동) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUsingGET5(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileOrganizationOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsingGET5(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (대외활동) 등록 API
         * @summary 프로필 (대외활동) 등록 API
         * @param {ProfileOrganizationAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST5(command: ProfileOrganizationAddCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileOrganizationOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST5(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (대외활동) 수정 API
         * @summary 프로필 (대외활동) 수정 API
         * @param {ProfileOrganizationUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT5(command: ProfileOrganizationUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileOrganizationOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT5(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileOrganizationApi - factory interface
 * @export
 */
export const ProfileOrganizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileOrganizationApiFp(configuration)
    return {
        /**
         * 프로필 (대외활동) 삭제 API
         * @summary 프로필 (대외활동) 삭제 API
         * @param {ProfileOrganizationApiDeleteUsingDELETE4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE4(requestParameters: ProfileOrganizationApiDeleteUsingDELETE4Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.deleteUsingDELETE4(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (대외활동) 조회 API
         * @summary 프로필 (대외활동) 조회 API
         * @param {ProfileOrganizationApiFetchUsingGET5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET5(requestParameters: ProfileOrganizationApiFetchUsingGET5Request, options?: AxiosRequestConfig): AxiosPromise<ProfileOrganizationOne> {
            return localVarFp.fetchUsingGET5(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (대외활동) 등록 API
         * @summary 프로필 (대외활동) 등록 API
         * @param {ProfileOrganizationApiSaveUsingPOST5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST5(requestParameters: ProfileOrganizationApiSaveUsingPOST5Request, options?: AxiosRequestConfig): AxiosPromise<ProfileOrganizationOne> {
            return localVarFp.saveUsingPOST5(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (대외활동) 수정 API
         * @summary 프로필 (대외활동) 수정 API
         * @param {ProfileOrganizationApiUpdateUsingPUT5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT5(requestParameters: ProfileOrganizationApiUpdateUsingPUT5Request, options?: AxiosRequestConfig): AxiosPromise<ProfileOrganizationOne> {
            return localVarFp.updateUsingPUT5(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsingDELETE4 operation in ProfileOrganizationApi.
 * @export
 * @interface ProfileOrganizationApiDeleteUsingDELETE4Request
 */
export interface ProfileOrganizationApiDeleteUsingDELETE4Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileOrganizationApiDeleteUsingDELETE4
     */
    readonly seq: number
}

/**
 * Request parameters for fetchUsingGET5 operation in ProfileOrganizationApi.
 * @export
 * @interface ProfileOrganizationApiFetchUsingGET5Request
 */
export interface ProfileOrganizationApiFetchUsingGET5Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileOrganizationApiFetchUsingGET5
     */
    readonly seq: number
}

/**
 * Request parameters for saveUsingPOST5 operation in ProfileOrganizationApi.
 * @export
 * @interface ProfileOrganizationApiSaveUsingPOST5Request
 */
export interface ProfileOrganizationApiSaveUsingPOST5Request {
    /**
     * command
     * @type {ProfileOrganizationAddCommand}
     * @memberof ProfileOrganizationApiSaveUsingPOST5
     */
    readonly command: ProfileOrganizationAddCommand
}

/**
 * Request parameters for updateUsingPUT5 operation in ProfileOrganizationApi.
 * @export
 * @interface ProfileOrganizationApiUpdateUsingPUT5Request
 */
export interface ProfileOrganizationApiUpdateUsingPUT5Request {
    /**
     * command
     * @type {ProfileOrganizationUpdateCommand}
     * @memberof ProfileOrganizationApiUpdateUsingPUT5
     */
    readonly command: ProfileOrganizationUpdateCommand
}

/**
 * ProfileOrganizationApi - object-oriented interface
 * @export
 * @class ProfileOrganizationApi
 * @extends {BaseAPI}
 */
export class ProfileOrganizationApi extends BaseAPI {
    /**
     * 프로필 (대외활동) 삭제 API
     * @summary 프로필 (대외활동) 삭제 API
     * @param {ProfileOrganizationApiDeleteUsingDELETE4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileOrganizationApi
     */
    public deleteUsingDELETE4(requestParameters: ProfileOrganizationApiDeleteUsingDELETE4Request, options?: AxiosRequestConfig) {
        return ProfileOrganizationApiFp(this.configuration).deleteUsingDELETE4(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (대외활동) 조회 API
     * @summary 프로필 (대외활동) 조회 API
     * @param {ProfileOrganizationApiFetchUsingGET5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileOrganizationApi
     */
    public fetchUsingGET5(requestParameters: ProfileOrganizationApiFetchUsingGET5Request, options?: AxiosRequestConfig) {
        return ProfileOrganizationApiFp(this.configuration).fetchUsingGET5(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (대외활동) 등록 API
     * @summary 프로필 (대외활동) 등록 API
     * @param {ProfileOrganizationApiSaveUsingPOST5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileOrganizationApi
     */
    public saveUsingPOST5(requestParameters: ProfileOrganizationApiSaveUsingPOST5Request, options?: AxiosRequestConfig) {
        return ProfileOrganizationApiFp(this.configuration).saveUsingPOST5(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (대외활동) 수정 API
     * @summary 프로필 (대외활동) 수정 API
     * @param {ProfileOrganizationApiUpdateUsingPUT5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileOrganizationApi
     */
    public updateUsingPUT5(requestParameters: ProfileOrganizationApiUpdateUsingPUT5Request, options?: AxiosRequestConfig) {
        return ProfileOrganizationApiFp(this.configuration).updateUsingPUT5(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfilePortfolioApi - axios parameter creator
 * @export
 */
export const ProfilePortfolioApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 프로필 (포트폴리오) 삭제 API
         * @summary 프로필 (포트폴리오) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteUsingDELETE5', 'seq', seq)
            const localVarPath = `/api/profile/portfolio/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (포트폴리오) 조회 API
         * @summary 프로필 (포트폴리오) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUsingGET1: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('fetchOneUsingGET1', 'seq', seq)
            const localVarPath = `/api/profile/portfolio/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (포트폴리오) 등록 API
         * @summary 프로필 (포트폴리오) 등록 API
         * @param {ProfilePortfolioAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST6: async (command: ProfilePortfolioAddCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST6', 'command', command)
            const localVarPath = `/api/profile/portfolio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (포트폴리오) 수정 API
         * @summary 프로필 (포트폴리오) 수정 API
         * @param {ProfilePortfolioUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT6: async (command: ProfilePortfolioUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateUsingPUT6', 'command', command)
            const localVarPath = `/api/profile/portfolio`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilePortfolioApi - functional programming interface
 * @export
 */
export const ProfilePortfolioApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfilePortfolioApiAxiosParamCreator(configuration)
    return {
        /**
         * 프로필 (포트폴리오) 삭제 API
         * @summary 프로필 (포트폴리오) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE5(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE5(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (포트폴리오) 조회 API
         * @summary 프로필 (포트폴리오) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneUsingGET1(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfilePortfolioOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchOneUsingGET1(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (포트폴리오) 등록 API
         * @summary 프로필 (포트폴리오) 등록 API
         * @param {ProfilePortfolioAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST6(command: ProfilePortfolioAddCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfilePortfolioOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST6(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (포트폴리오) 수정 API
         * @summary 프로필 (포트폴리오) 수정 API
         * @param {ProfilePortfolioUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT6(command: ProfilePortfolioUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfilePortfolioOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT6(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfilePortfolioApi - factory interface
 * @export
 */
export const ProfilePortfolioApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfilePortfolioApiFp(configuration)
    return {
        /**
         * 프로필 (포트폴리오) 삭제 API
         * @summary 프로필 (포트폴리오) 삭제 API
         * @param {ProfilePortfolioApiDeleteUsingDELETE5Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(requestParameters: ProfilePortfolioApiDeleteUsingDELETE5Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.deleteUsingDELETE5(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (포트폴리오) 조회 API
         * @summary 프로필 (포트폴리오) 조회 API
         * @param {ProfilePortfolioApiFetchOneUsingGET1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUsingGET1(requestParameters: ProfilePortfolioApiFetchOneUsingGET1Request, options?: AxiosRequestConfig): AxiosPromise<ProfilePortfolioOne> {
            return localVarFp.fetchOneUsingGET1(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (포트폴리오) 등록 API
         * @summary 프로필 (포트폴리오) 등록 API
         * @param {ProfilePortfolioApiSaveUsingPOST6Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST6(requestParameters: ProfilePortfolioApiSaveUsingPOST6Request, options?: AxiosRequestConfig): AxiosPromise<ProfilePortfolioOne> {
            return localVarFp.saveUsingPOST6(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (포트폴리오) 수정 API
         * @summary 프로필 (포트폴리오) 수정 API
         * @param {ProfilePortfolioApiUpdateUsingPUT6Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT6(requestParameters: ProfilePortfolioApiUpdateUsingPUT6Request, options?: AxiosRequestConfig): AxiosPromise<ProfilePortfolioOne> {
            return localVarFp.updateUsingPUT6(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsingDELETE5 operation in ProfilePortfolioApi.
 * @export
 * @interface ProfilePortfolioApiDeleteUsingDELETE5Request
 */
export interface ProfilePortfolioApiDeleteUsingDELETE5Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfilePortfolioApiDeleteUsingDELETE5
     */
    readonly seq: number
}

/**
 * Request parameters for fetchOneUsingGET1 operation in ProfilePortfolioApi.
 * @export
 * @interface ProfilePortfolioApiFetchOneUsingGET1Request
 */
export interface ProfilePortfolioApiFetchOneUsingGET1Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfilePortfolioApiFetchOneUsingGET1
     */
    readonly seq: number
}

/**
 * Request parameters for saveUsingPOST6 operation in ProfilePortfolioApi.
 * @export
 * @interface ProfilePortfolioApiSaveUsingPOST6Request
 */
export interface ProfilePortfolioApiSaveUsingPOST6Request {
    /**
     * command
     * @type {ProfilePortfolioAddCommand}
     * @memberof ProfilePortfolioApiSaveUsingPOST6
     */
    readonly command: ProfilePortfolioAddCommand
}

/**
 * Request parameters for updateUsingPUT6 operation in ProfilePortfolioApi.
 * @export
 * @interface ProfilePortfolioApiUpdateUsingPUT6Request
 */
export interface ProfilePortfolioApiUpdateUsingPUT6Request {
    /**
     * command
     * @type {ProfilePortfolioUpdateCommand}
     * @memberof ProfilePortfolioApiUpdateUsingPUT6
     */
    readonly command: ProfilePortfolioUpdateCommand
}

/**
 * ProfilePortfolioApi - object-oriented interface
 * @export
 * @class ProfilePortfolioApi
 * @extends {BaseAPI}
 */
export class ProfilePortfolioApi extends BaseAPI {
    /**
     * 프로필 (포트폴리오) 삭제 API
     * @summary 프로필 (포트폴리오) 삭제 API
     * @param {ProfilePortfolioApiDeleteUsingDELETE5Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilePortfolioApi
     */
    public deleteUsingDELETE5(requestParameters: ProfilePortfolioApiDeleteUsingDELETE5Request, options?: AxiosRequestConfig) {
        return ProfilePortfolioApiFp(this.configuration).deleteUsingDELETE5(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (포트폴리오) 조회 API
     * @summary 프로필 (포트폴리오) 조회 API
     * @param {ProfilePortfolioApiFetchOneUsingGET1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilePortfolioApi
     */
    public fetchOneUsingGET1(requestParameters: ProfilePortfolioApiFetchOneUsingGET1Request, options?: AxiosRequestConfig) {
        return ProfilePortfolioApiFp(this.configuration).fetchOneUsingGET1(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (포트폴리오) 등록 API
     * @summary 프로필 (포트폴리오) 등록 API
     * @param {ProfilePortfolioApiSaveUsingPOST6Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilePortfolioApi
     */
    public saveUsingPOST6(requestParameters: ProfilePortfolioApiSaveUsingPOST6Request, options?: AxiosRequestConfig) {
        return ProfilePortfolioApiFp(this.configuration).saveUsingPOST6(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (포트폴리오) 수정 API
     * @summary 프로필 (포트폴리오) 수정 API
     * @param {ProfilePortfolioApiUpdateUsingPUT6Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilePortfolioApi
     */
    public updateUsingPUT6(requestParameters: ProfilePortfolioApiUpdateUsingPUT6Request, options?: AxiosRequestConfig) {
        return ProfilePortfolioApiFp(this.configuration).updateUsingPUT6(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileProjectApi - axios parameter creator
 * @export
 */
export const ProfileProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 프로필 (프로젝트) 삭제 API
         * @summary 프로필 (프로젝트) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE6: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteUsingDELETE6', 'seq', seq)
            const localVarPath = `/api/profile/project/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (프로젝트) 조회 API
         * @summary 프로필 (프로젝트) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUsingGET2: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('fetchOneUsingGET2', 'seq', seq)
            const localVarPath = `/api/profile/project/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (프로젝트) 등록 API
         * @summary 프로필 (프로젝트) 등록 API
         * @param {ProfileProjectAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST7: async (command: ProfileProjectAddCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST7', 'command', command)
            const localVarPath = `/api/profile/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (프로젝트) 수정 API
         * @summary 프로필 (프로젝트) 수정 API
         * @param {ProfileProjectUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT7: async (command: ProfileProjectUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateUsingPUT7', 'command', command)
            const localVarPath = `/api/profile/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileProjectApi - functional programming interface
 * @export
 */
export const ProfileProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 프로필 (프로젝트) 삭제 API
         * @summary 프로필 (프로젝트) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE6(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE6(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (프로젝트) 조회 API
         * @summary 프로필 (프로젝트) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneUsingGET2(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileProjectOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchOneUsingGET2(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (프로젝트) 등록 API
         * @summary 프로필 (프로젝트) 등록 API
         * @param {ProfileProjectAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST7(command: ProfileProjectAddCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileProjectOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST7(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (프로젝트) 수정 API
         * @summary 프로필 (프로젝트) 수정 API
         * @param {ProfileProjectUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT7(command: ProfileProjectUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileProjectOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT7(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileProjectApi - factory interface
 * @export
 */
export const ProfileProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileProjectApiFp(configuration)
    return {
        /**
         * 프로필 (프로젝트) 삭제 API
         * @summary 프로필 (프로젝트) 삭제 API
         * @param {ProfileProjectApiDeleteUsingDELETE6Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE6(requestParameters: ProfileProjectApiDeleteUsingDELETE6Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.deleteUsingDELETE6(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (프로젝트) 조회 API
         * @summary 프로필 (프로젝트) 조회 API
         * @param {ProfileProjectApiFetchOneUsingGET2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUsingGET2(requestParameters: ProfileProjectApiFetchOneUsingGET2Request, options?: AxiosRequestConfig): AxiosPromise<ProfileProjectOne> {
            return localVarFp.fetchOneUsingGET2(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (프로젝트) 등록 API
         * @summary 프로필 (프로젝트) 등록 API
         * @param {ProfileProjectApiSaveUsingPOST7Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST7(requestParameters: ProfileProjectApiSaveUsingPOST7Request, options?: AxiosRequestConfig): AxiosPromise<ProfileProjectOne> {
            return localVarFp.saveUsingPOST7(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (프로젝트) 수정 API
         * @summary 프로필 (프로젝트) 수정 API
         * @param {ProfileProjectApiUpdateUsingPUT7Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT7(requestParameters: ProfileProjectApiUpdateUsingPUT7Request, options?: AxiosRequestConfig): AxiosPromise<ProfileProjectOne> {
            return localVarFp.updateUsingPUT7(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsingDELETE6 operation in ProfileProjectApi.
 * @export
 * @interface ProfileProjectApiDeleteUsingDELETE6Request
 */
export interface ProfileProjectApiDeleteUsingDELETE6Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileProjectApiDeleteUsingDELETE6
     */
    readonly seq: number
}

/**
 * Request parameters for fetchOneUsingGET2 operation in ProfileProjectApi.
 * @export
 * @interface ProfileProjectApiFetchOneUsingGET2Request
 */
export interface ProfileProjectApiFetchOneUsingGET2Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileProjectApiFetchOneUsingGET2
     */
    readonly seq: number
}

/**
 * Request parameters for saveUsingPOST7 operation in ProfileProjectApi.
 * @export
 * @interface ProfileProjectApiSaveUsingPOST7Request
 */
export interface ProfileProjectApiSaveUsingPOST7Request {
    /**
     * command
     * @type {ProfileProjectAddCommand}
     * @memberof ProfileProjectApiSaveUsingPOST7
     */
    readonly command: ProfileProjectAddCommand
}

/**
 * Request parameters for updateUsingPUT7 operation in ProfileProjectApi.
 * @export
 * @interface ProfileProjectApiUpdateUsingPUT7Request
 */
export interface ProfileProjectApiUpdateUsingPUT7Request {
    /**
     * command
     * @type {ProfileProjectUpdateCommand}
     * @memberof ProfileProjectApiUpdateUsingPUT7
     */
    readonly command: ProfileProjectUpdateCommand
}

/**
 * ProfileProjectApi - object-oriented interface
 * @export
 * @class ProfileProjectApi
 * @extends {BaseAPI}
 */
export class ProfileProjectApi extends BaseAPI {
    /**
     * 프로필 (프로젝트) 삭제 API
     * @summary 프로필 (프로젝트) 삭제 API
     * @param {ProfileProjectApiDeleteUsingDELETE6Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileProjectApi
     */
    public deleteUsingDELETE6(requestParameters: ProfileProjectApiDeleteUsingDELETE6Request, options?: AxiosRequestConfig) {
        return ProfileProjectApiFp(this.configuration).deleteUsingDELETE6(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (프로젝트) 조회 API
     * @summary 프로필 (프로젝트) 조회 API
     * @param {ProfileProjectApiFetchOneUsingGET2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileProjectApi
     */
    public fetchOneUsingGET2(requestParameters: ProfileProjectApiFetchOneUsingGET2Request, options?: AxiosRequestConfig) {
        return ProfileProjectApiFp(this.configuration).fetchOneUsingGET2(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (프로젝트) 등록 API
     * @summary 프로필 (프로젝트) 등록 API
     * @param {ProfileProjectApiSaveUsingPOST7Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileProjectApi
     */
    public saveUsingPOST7(requestParameters: ProfileProjectApiSaveUsingPOST7Request, options?: AxiosRequestConfig) {
        return ProfileProjectApiFp(this.configuration).saveUsingPOST7(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (프로젝트) 수정 API
     * @summary 프로필 (프로젝트) 수정 API
     * @param {ProfileProjectApiUpdateUsingPUT7Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileProjectApi
     */
    public updateUsingPUT7(requestParameters: ProfileProjectApiUpdateUsingPUT7Request, options?: AxiosRequestConfig) {
        return ProfileProjectApiFp(this.configuration).updateUsingPUT7(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileSkillApi - axios parameter creator
 * @export
 */
export const ProfileSkillApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 프로필 (역량/스킬) 삭제 API
         * @summary 프로필 (역량/스킬) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE7: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteUsingDELETE7', 'seq', seq)
            const localVarPath = `/api/profile/skill/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (역량/스킬) 조회 API 등록되 있는 모든 정보를 조회한다.
         * @summary 프로필 (역량/스킬) 조회 API
         * @param {string} type 프로필 유형
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchListUsingGET: async (type: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('fetchListUsingGET', 'type', type)
            const localVarPath = `/api/profile/skills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (역량/스킬) 조회 API
         * @summary 프로필 (역량/스킬) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUsingGET3: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('fetchOneUsingGET3', 'seq', seq)
            const localVarPath = `/api/profile/skill/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (역량/스킬) 저장 API 등록되 있는 모든 정보를 삭제 후, 재 등록한다.
         * @summary 프로필 (역량/스킬) 저장 API
         * @param {ProfileSkillSaveCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST8: async (command: ProfileSkillSaveCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST8', 'command', command)
            const localVarPath = `/api/profile/skills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (역량/스킬) 등록 API
         * @summary 프로필 (역량/스킬) 등록 API
         * @param {ProfileSkillAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST9: async (command: ProfileSkillAddCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST9', 'command', command)
            const localVarPath = `/api/profile/skill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (역량/스킬) 수정 API
         * @summary 프로필 (역량/스킬) 수정 API
         * @param {ProfileSkillUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT8: async (command: ProfileSkillUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateUsingPUT8', 'command', command)
            const localVarPath = `/api/profile/skill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileSkillApi - functional programming interface
 * @export
 */
export const ProfileSkillApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileSkillApiAxiosParamCreator(configuration)
    return {
        /**
         * 프로필 (역량/스킬) 삭제 API
         * @summary 프로필 (역량/스킬) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE7(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE7(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (역량/스킬) 조회 API 등록되 있는 모든 정보를 조회한다.
         * @summary 프로필 (역량/스킬) 조회 API
         * @param {string} type 프로필 유형
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchListUsingGET(type: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProfileSkillOne>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchListUsingGET(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (역량/스킬) 조회 API
         * @summary 프로필 (역량/스킬) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneUsingGET3(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorModelNamenamespacecomWehopApiDomainProfileDto nameProfileProjectOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchOneUsingGET3(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (역량/스킬) 저장 API 등록되 있는 모든 정보를 삭제 후, 재 등록한다.
         * @summary 프로필 (역량/스킬) 저장 API
         * @param {ProfileSkillSaveCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST8(command: ProfileSkillSaveCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST8(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (역량/스킬) 등록 API
         * @summary 프로필 (역량/스킬) 등록 API
         * @param {ProfileSkillAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST9(command: ProfileSkillAddCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorModelNamenamespacecomWehopApiDomainProfileDto nameProfileProjectOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST9(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (역량/스킬) 수정 API
         * @summary 프로필 (역량/스킬) 수정 API
         * @param {ProfileSkillUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT8(command: ProfileSkillUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorModelNamenamespacecomWehopApiDomainProfileDto nameProfileVolunteerOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT8(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileSkillApi - factory interface
 * @export
 */
export const ProfileSkillApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileSkillApiFp(configuration)
    return {
        /**
         * 프로필 (역량/스킬) 삭제 API
         * @summary 프로필 (역량/스킬) 삭제 API
         * @param {ProfileSkillApiDeleteUsingDELETE7Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE7(requestParameters: ProfileSkillApiDeleteUsingDELETE7Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.deleteUsingDELETE7(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (역량/스킬) 조회 API 등록되 있는 모든 정보를 조회한다.
         * @summary 프로필 (역량/스킬) 조회 API
         * @param {ProfileSkillApiFetchListUsingGETRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchListUsingGET(requestParameters: ProfileSkillApiFetchListUsingGETRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ProfileSkillOne>> {
            return localVarFp.fetchListUsingGET(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (역량/스킬) 조회 API
         * @summary 프로필 (역량/스킬) 조회 API
         * @param {ProfileSkillApiFetchOneUsingGET3Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUsingGET3(requestParameters: ProfileSkillApiFetchOneUsingGET3Request, options?: AxiosRequestConfig): AxiosPromise<ErrorModelNamenamespacecomWehopApiDomainProfileDto nameProfileProjectOne> {
            return localVarFp.fetchOneUsingGET3(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (역량/스킬) 저장 API 등록되 있는 모든 정보를 삭제 후, 재 등록한다.
         * @summary 프로필 (역량/스킬) 저장 API
         * @param {ProfileSkillApiSaveUsingPOST8Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST8(requestParameters: ProfileSkillApiSaveUsingPOST8Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.saveUsingPOST8(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (역량/스킬) 등록 API
         * @summary 프로필 (역량/스킬) 등록 API
         * @param {ProfileSkillApiSaveUsingPOST9Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST9(requestParameters: ProfileSkillApiSaveUsingPOST9Request, options?: AxiosRequestConfig): AxiosPromise<ErrorModelNamenamespacecomWehopApiDomainProfileDto nameProfileProjectOne> {
            return localVarFp.saveUsingPOST9(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (역량/스킬) 수정 API
         * @summary 프로필 (역량/스킬) 수정 API
         * @param {ProfileSkillApiUpdateUsingPUT8Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT8(requestParameters: ProfileSkillApiUpdateUsingPUT8Request, options?: AxiosRequestConfig): AxiosPromise<ErrorModelNamenamespacecomWehopApiDomainProfileDto nameProfileVolunteerOne> {
            return localVarFp.updateUsingPUT8(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsingDELETE7 operation in ProfileSkillApi.
 * @export
 * @interface ProfileSkillApiDeleteUsingDELETE7Request
 */
export interface ProfileSkillApiDeleteUsingDELETE7Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileSkillApiDeleteUsingDELETE7
     */
    readonly seq: number
}

/**
 * Request parameters for fetchListUsingGET operation in ProfileSkillApi.
 * @export
 * @interface ProfileSkillApiFetchListUsingGETRequest
 */
export interface ProfileSkillApiFetchListUsingGETRequest {
    /**
     * 프로필 유형
     * @type {string}
     * @memberof ProfileSkillApiFetchListUsingGET
     */
    readonly type: string
}

/**
 * Request parameters for fetchOneUsingGET3 operation in ProfileSkillApi.
 * @export
 * @interface ProfileSkillApiFetchOneUsingGET3Request
 */
export interface ProfileSkillApiFetchOneUsingGET3Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileSkillApiFetchOneUsingGET3
     */
    readonly seq: number
}

/**
 * Request parameters for saveUsingPOST8 operation in ProfileSkillApi.
 * @export
 * @interface ProfileSkillApiSaveUsingPOST8Request
 */
export interface ProfileSkillApiSaveUsingPOST8Request {
    /**
     * command
     * @type {ProfileSkillSaveCommand}
     * @memberof ProfileSkillApiSaveUsingPOST8
     */
    readonly command: ProfileSkillSaveCommand
}

/**
 * Request parameters for saveUsingPOST9 operation in ProfileSkillApi.
 * @export
 * @interface ProfileSkillApiSaveUsingPOST9Request
 */
export interface ProfileSkillApiSaveUsingPOST9Request {
    /**
     * command
     * @type {ProfileSkillAddCommand}
     * @memberof ProfileSkillApiSaveUsingPOST9
     */
    readonly command: ProfileSkillAddCommand
}

/**
 * Request parameters for updateUsingPUT8 operation in ProfileSkillApi.
 * @export
 * @interface ProfileSkillApiUpdateUsingPUT8Request
 */
export interface ProfileSkillApiUpdateUsingPUT8Request {
    /**
     * command
     * @type {ProfileSkillUpdateCommand}
     * @memberof ProfileSkillApiUpdateUsingPUT8
     */
    readonly command: ProfileSkillUpdateCommand
}

/**
 * ProfileSkillApi - object-oriented interface
 * @export
 * @class ProfileSkillApi
 * @extends {BaseAPI}
 */
export class ProfileSkillApi extends BaseAPI {
    /**
     * 프로필 (역량/스킬) 삭제 API
     * @summary 프로필 (역량/스킬) 삭제 API
     * @param {ProfileSkillApiDeleteUsingDELETE7Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileSkillApi
     */
    public deleteUsingDELETE7(requestParameters: ProfileSkillApiDeleteUsingDELETE7Request, options?: AxiosRequestConfig) {
        return ProfileSkillApiFp(this.configuration).deleteUsingDELETE7(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (역량/스킬) 조회 API 등록되 있는 모든 정보를 조회한다.
     * @summary 프로필 (역량/스킬) 조회 API
     * @param {ProfileSkillApiFetchListUsingGETRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileSkillApi
     */
    public fetchListUsingGET(requestParameters: ProfileSkillApiFetchListUsingGETRequest, options?: AxiosRequestConfig) {
        return ProfileSkillApiFp(this.configuration).fetchListUsingGET(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (역량/스킬) 조회 API
     * @summary 프로필 (역량/스킬) 조회 API
     * @param {ProfileSkillApiFetchOneUsingGET3Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileSkillApi
     */
    public fetchOneUsingGET3(requestParameters: ProfileSkillApiFetchOneUsingGET3Request, options?: AxiosRequestConfig) {
        return ProfileSkillApiFp(this.configuration).fetchOneUsingGET3(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (역량/스킬) 저장 API 등록되 있는 모든 정보를 삭제 후, 재 등록한다.
     * @summary 프로필 (역량/스킬) 저장 API
     * @param {ProfileSkillApiSaveUsingPOST8Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileSkillApi
     */
    public saveUsingPOST8(requestParameters: ProfileSkillApiSaveUsingPOST8Request, options?: AxiosRequestConfig) {
        return ProfileSkillApiFp(this.configuration).saveUsingPOST8(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (역량/스킬) 등록 API
     * @summary 프로필 (역량/스킬) 등록 API
     * @param {ProfileSkillApiSaveUsingPOST9Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileSkillApi
     */
    public saveUsingPOST9(requestParameters: ProfileSkillApiSaveUsingPOST9Request, options?: AxiosRequestConfig) {
        return ProfileSkillApiFp(this.configuration).saveUsingPOST9(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (역량/스킬) 수정 API
     * @summary 프로필 (역량/스킬) 수정 API
     * @param {ProfileSkillApiUpdateUsingPUT8Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileSkillApi
     */
    public updateUsingPUT8(requestParameters: ProfileSkillApiUpdateUsingPUT8Request, options?: AxiosRequestConfig) {
        return ProfileSkillApiFp(this.configuration).updateUsingPUT8(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileVolunteeringApi - axios parameter creator
 * @export
 */
export const ProfileVolunteeringApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 프로필 (봉사활동) 삭제 API
         * @summary 프로필 (봉사활동) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE8: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteUsingDELETE8', 'seq', seq)
            const localVarPath = `/api/profile/volunteer/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (봉사활동) 조회 API
         * @summary 프로필 (봉사활동) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET6: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('fetchUsingGET6', 'seq', seq)
            const localVarPath = `/api/profile/volunteer/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (봉사활동) 등록 API
         * @summary 프로필 (봉사활동) 등록 API
         * @param {ProfileVolunteerAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST10: async (command: ProfileVolunteerAddCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST10', 'command', command)
            const localVarPath = `/api/profile/volunteer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (봉사활동) 수정 API
         * @summary 프로필 (봉사활동) 수정 API
         * @param {ProfileVolunteerUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT9: async (command: ProfileVolunteerUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateUsingPUT9', 'command', command)
            const localVarPath = `/api/profile/volunteer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileVolunteeringApi - functional programming interface
 * @export
 */
export const ProfileVolunteeringApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileVolunteeringApiAxiosParamCreator(configuration)
    return {
        /**
         * 프로필 (봉사활동) 삭제 API
         * @summary 프로필 (봉사활동) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE8(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE8(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (봉사활동) 조회 API
         * @summary 프로필 (봉사활동) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUsingGET6(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileVolunteerOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsingGET6(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (봉사활동) 등록 API
         * @summary 프로필 (봉사활동) 등록 API
         * @param {ProfileVolunteerAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST10(command: ProfileVolunteerAddCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileVolunteerOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST10(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (봉사활동) 수정 API
         * @summary 프로필 (봉사활동) 수정 API
         * @param {ProfileVolunteerUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT9(command: ProfileVolunteerUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileVolunteerOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT9(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileVolunteeringApi - factory interface
 * @export
 */
export const ProfileVolunteeringApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileVolunteeringApiFp(configuration)
    return {
        /**
         * 프로필 (봉사활동) 삭제 API
         * @summary 프로필 (봉사활동) 삭제 API
         * @param {ProfileVolunteeringApiDeleteUsingDELETE8Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE8(requestParameters: ProfileVolunteeringApiDeleteUsingDELETE8Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.deleteUsingDELETE8(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (봉사활동) 조회 API
         * @summary 프로필 (봉사활동) 조회 API
         * @param {ProfileVolunteeringApiFetchUsingGET6Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET6(requestParameters: ProfileVolunteeringApiFetchUsingGET6Request, options?: AxiosRequestConfig): AxiosPromise<ProfileVolunteerOne> {
            return localVarFp.fetchUsingGET6(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (봉사활동) 등록 API
         * @summary 프로필 (봉사활동) 등록 API
         * @param {ProfileVolunteeringApiSaveUsingPOST10Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST10(requestParameters: ProfileVolunteeringApiSaveUsingPOST10Request, options?: AxiosRequestConfig): AxiosPromise<ProfileVolunteerOne> {
            return localVarFp.saveUsingPOST10(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (봉사활동) 수정 API
         * @summary 프로필 (봉사활동) 수정 API
         * @param {ProfileVolunteeringApiUpdateUsingPUT9Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT9(requestParameters: ProfileVolunteeringApiUpdateUsingPUT9Request, options?: AxiosRequestConfig): AxiosPromise<ProfileVolunteerOne> {
            return localVarFp.updateUsingPUT9(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsingDELETE8 operation in ProfileVolunteeringApi.
 * @export
 * @interface ProfileVolunteeringApiDeleteUsingDELETE8Request
 */
export interface ProfileVolunteeringApiDeleteUsingDELETE8Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileVolunteeringApiDeleteUsingDELETE8
     */
    readonly seq: number
}

/**
 * Request parameters for fetchUsingGET6 operation in ProfileVolunteeringApi.
 * @export
 * @interface ProfileVolunteeringApiFetchUsingGET6Request
 */
export interface ProfileVolunteeringApiFetchUsingGET6Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileVolunteeringApiFetchUsingGET6
     */
    readonly seq: number
}

/**
 * Request parameters for saveUsingPOST10 operation in ProfileVolunteeringApi.
 * @export
 * @interface ProfileVolunteeringApiSaveUsingPOST10Request
 */
export interface ProfileVolunteeringApiSaveUsingPOST10Request {
    /**
     * command
     * @type {ProfileVolunteerAddCommand}
     * @memberof ProfileVolunteeringApiSaveUsingPOST10
     */
    readonly command: ProfileVolunteerAddCommand
}

/**
 * Request parameters for updateUsingPUT9 operation in ProfileVolunteeringApi.
 * @export
 * @interface ProfileVolunteeringApiUpdateUsingPUT9Request
 */
export interface ProfileVolunteeringApiUpdateUsingPUT9Request {
    /**
     * command
     * @type {ProfileVolunteerUpdateCommand}
     * @memberof ProfileVolunteeringApiUpdateUsingPUT9
     */
    readonly command: ProfileVolunteerUpdateCommand
}

/**
 * ProfileVolunteeringApi - object-oriented interface
 * @export
 * @class ProfileVolunteeringApi
 * @extends {BaseAPI}
 */
export class ProfileVolunteeringApi extends BaseAPI {
    /**
     * 프로필 (봉사활동) 삭제 API
     * @summary 프로필 (봉사활동) 삭제 API
     * @param {ProfileVolunteeringApiDeleteUsingDELETE8Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileVolunteeringApi
     */
    public deleteUsingDELETE8(requestParameters: ProfileVolunteeringApiDeleteUsingDELETE8Request, options?: AxiosRequestConfig) {
        return ProfileVolunteeringApiFp(this.configuration).deleteUsingDELETE8(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (봉사활동) 조회 API
     * @summary 프로필 (봉사활동) 조회 API
     * @param {ProfileVolunteeringApiFetchUsingGET6Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileVolunteeringApi
     */
    public fetchUsingGET6(requestParameters: ProfileVolunteeringApiFetchUsingGET6Request, options?: AxiosRequestConfig) {
        return ProfileVolunteeringApiFp(this.configuration).fetchUsingGET6(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (봉사활동) 등록 API
     * @summary 프로필 (봉사활동) 등록 API
     * @param {ProfileVolunteeringApiSaveUsingPOST10Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileVolunteeringApi
     */
    public saveUsingPOST10(requestParameters: ProfileVolunteeringApiSaveUsingPOST10Request, options?: AxiosRequestConfig) {
        return ProfileVolunteeringApiFp(this.configuration).saveUsingPOST10(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (봉사활동) 수정 API
     * @summary 프로필 (봉사활동) 수정 API
     * @param {ProfileVolunteeringApiUpdateUsingPUT9Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileVolunteeringApi
     */
    public updateUsingPUT9(requestParameters: ProfileVolunteeringApiUpdateUsingPUT9Request, options?: AxiosRequestConfig) {
        return ProfileVolunteeringApiFp(this.configuration).updateUsingPUT9(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileWorkExperienceApi - axios parameter creator
 * @export
 */
export const ProfileWorkExperienceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 프로필 (경력) 삭제 API
         * @summary 프로필 (경력) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE9: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('deleteUsingDELETE9', 'seq', seq)
            const localVarPath = `/api/profile/work-experience/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (경력) 조회 API
         * @summary 프로필 (경력) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET7: async (seq: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seq' is not null or undefined
            assertParamExists('fetchUsingGET7', 'seq', seq)
            const localVarPath = `/api/profile/work-experience/{seq}`
                .replace(`{${"seq"}}`, encodeURIComponent(String(seq)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (경력) 등록 API
         * @summary 프로필 (경력) 등록 API
         * @param {ProfileWorkExperienceAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST11: async (command: ProfileWorkExperienceAddCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('saveUsingPOST11', 'command', command)
            const localVarPath = `/api/profile/work-experience`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 프로필 (경력) 수정 API
         * @summary 프로필 (경력) 수정 API
         * @param {ProfileWorkExperienceUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT10: async (command: ProfileWorkExperienceUpdateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('updateUsingPUT10', 'command', command)
            const localVarPath = `/api/profile/work-experience`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileWorkExperienceApi - functional programming interface
 * @export
 */
export const ProfileWorkExperienceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileWorkExperienceApiAxiosParamCreator(configuration)
    return {
        /**
         * 프로필 (경력) 삭제 API
         * @summary 프로필 (경력) 삭제 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE9(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE9(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (경력) 조회 API
         * @summary 프로필 (경력) 조회 API
         * @param {number} seq 일련번호
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUsingGET7(seq: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileWorkExperienceOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUsingGET7(seq, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (경력) 등록 API
         * @summary 프로필 (경력) 등록 API
         * @param {ProfileWorkExperienceAddCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveUsingPOST11(command: ProfileWorkExperienceAddCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileWorkExperienceOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveUsingPOST11(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 프로필 (경력) 수정 API
         * @summary 프로필 (경력) 수정 API
         * @param {ProfileWorkExperienceUpdateCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsingPUT10(command: ProfileWorkExperienceUpdateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileWorkExperienceOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsingPUT10(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileWorkExperienceApi - factory interface
 * @export
 */
export const ProfileWorkExperienceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileWorkExperienceApiFp(configuration)
    return {
        /**
         * 프로필 (경력) 삭제 API
         * @summary 프로필 (경력) 삭제 API
         * @param {ProfileWorkExperienceApiDeleteUsingDELETE9Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE9(requestParameters: ProfileWorkExperienceApiDeleteUsingDELETE9Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.deleteUsingDELETE9(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (경력) 조회 API
         * @summary 프로필 (경력) 조회 API
         * @param {ProfileWorkExperienceApiFetchUsingGET7Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUsingGET7(requestParameters: ProfileWorkExperienceApiFetchUsingGET7Request, options?: AxiosRequestConfig): AxiosPromise<ProfileWorkExperienceOne> {
            return localVarFp.fetchUsingGET7(requestParameters.seq, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (경력) 등록 API
         * @summary 프로필 (경력) 등록 API
         * @param {ProfileWorkExperienceApiSaveUsingPOST11Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST11(requestParameters: ProfileWorkExperienceApiSaveUsingPOST11Request, options?: AxiosRequestConfig): AxiosPromise<ProfileWorkExperienceOne> {
            return localVarFp.saveUsingPOST11(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 프로필 (경력) 수정 API
         * @summary 프로필 (경력) 수정 API
         * @param {ProfileWorkExperienceApiUpdateUsingPUT10Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsingPUT10(requestParameters: ProfileWorkExperienceApiUpdateUsingPUT10Request, options?: AxiosRequestConfig): AxiosPromise<ProfileWorkExperienceOne> {
            return localVarFp.updateUsingPUT10(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsingDELETE9 operation in ProfileWorkExperienceApi.
 * @export
 * @interface ProfileWorkExperienceApiDeleteUsingDELETE9Request
 */
export interface ProfileWorkExperienceApiDeleteUsingDELETE9Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileWorkExperienceApiDeleteUsingDELETE9
     */
    readonly seq: number
}

/**
 * Request parameters for fetchUsingGET7 operation in ProfileWorkExperienceApi.
 * @export
 * @interface ProfileWorkExperienceApiFetchUsingGET7Request
 */
export interface ProfileWorkExperienceApiFetchUsingGET7Request {
    /**
     * 일련번호
     * @type {number}
     * @memberof ProfileWorkExperienceApiFetchUsingGET7
     */
    readonly seq: number
}

/**
 * Request parameters for saveUsingPOST11 operation in ProfileWorkExperienceApi.
 * @export
 * @interface ProfileWorkExperienceApiSaveUsingPOST11Request
 */
export interface ProfileWorkExperienceApiSaveUsingPOST11Request {
    /**
     * command
     * @type {ProfileWorkExperienceAddCommand}
     * @memberof ProfileWorkExperienceApiSaveUsingPOST11
     */
    readonly command: ProfileWorkExperienceAddCommand
}

/**
 * Request parameters for updateUsingPUT10 operation in ProfileWorkExperienceApi.
 * @export
 * @interface ProfileWorkExperienceApiUpdateUsingPUT10Request
 */
export interface ProfileWorkExperienceApiUpdateUsingPUT10Request {
    /**
     * command
     * @type {ProfileWorkExperienceUpdateCommand}
     * @memberof ProfileWorkExperienceApiUpdateUsingPUT10
     */
    readonly command: ProfileWorkExperienceUpdateCommand
}

/**
 * ProfileWorkExperienceApi - object-oriented interface
 * @export
 * @class ProfileWorkExperienceApi
 * @extends {BaseAPI}
 */
export class ProfileWorkExperienceApi extends BaseAPI {
    /**
     * 프로필 (경력) 삭제 API
     * @summary 프로필 (경력) 삭제 API
     * @param {ProfileWorkExperienceApiDeleteUsingDELETE9Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileWorkExperienceApi
     */
    public deleteUsingDELETE9(requestParameters: ProfileWorkExperienceApiDeleteUsingDELETE9Request, options?: AxiosRequestConfig) {
        return ProfileWorkExperienceApiFp(this.configuration).deleteUsingDELETE9(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (경력) 조회 API
     * @summary 프로필 (경력) 조회 API
     * @param {ProfileWorkExperienceApiFetchUsingGET7Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileWorkExperienceApi
     */
    public fetchUsingGET7(requestParameters: ProfileWorkExperienceApiFetchUsingGET7Request, options?: AxiosRequestConfig) {
        return ProfileWorkExperienceApiFp(this.configuration).fetchUsingGET7(requestParameters.seq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (경력) 등록 API
     * @summary 프로필 (경력) 등록 API
     * @param {ProfileWorkExperienceApiSaveUsingPOST11Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileWorkExperienceApi
     */
    public saveUsingPOST11(requestParameters: ProfileWorkExperienceApiSaveUsingPOST11Request, options?: AxiosRequestConfig) {
        return ProfileWorkExperienceApiFp(this.configuration).saveUsingPOST11(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 프로필 (경력) 수정 API
     * @summary 프로필 (경력) 수정 API
     * @param {ProfileWorkExperienceApiUpdateUsingPUT10Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileWorkExperienceApi
     */
    public updateUsingPUT10(requestParameters: ProfileWorkExperienceApiUpdateUsingPUT10Request, options?: AxiosRequestConfig) {
        return ProfileWorkExperienceApiFp(this.configuration).updateUsingPUT10(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TooltipApi - axios parameter creator
 * @export
 */
export const TooltipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 툴팁 정보 삭제 처리 API
         * @summary 툴팁 정보 삭제 처리 API
         * @param {string} tooltipId tooltipId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE10: async (tooltipId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tooltipId' is not null or undefined
            assertParamExists('deleteUsingDELETE10', 'tooltipId', tooltipId)
            const localVarPath = `/api/tooltip/{tooltipId}`
                .replace(`{${"tooltipId"}}`, encodeURIComponent(String(tooltipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 툴팁 목록 조회 API
         * @summary 툴팁 목록 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchListUsingGET1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tooltip`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 툴팁 정보 조회 API
         * @summary 툴팁 정보 조회 API
         * @param {string} tooltipId tooltipId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUsingGET4: async (tooltipId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tooltipId' is not null or undefined
            assertParamExists('fetchOneUsingGET4', 'tooltipId', tooltipId)
            const localVarPath = `/api/tooltip/{tooltipId}`
                .replace(`{${"tooltipId"}}`, encodeURIComponent(String(tooltipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 툴팁 정보 확인 처리 API
         * @summary 툴팁 정보 확인 처리 API
         * @param {string} tooltipId tooltipId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsingPUT: async (tooltipId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tooltipId' is not null or undefined
            assertParamExists('putUsingPUT', 'tooltipId', tooltipId)
            const localVarPath = `/api/tooltip/{tooltipId}`
                .replace(`{${"tooltipId"}}`, encodeURIComponent(String(tooltipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TooltipApi - functional programming interface
 * @export
 */
export const TooltipApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TooltipApiAxiosParamCreator(configuration)
    return {
        /**
         * 툴팁 정보 삭제 처리 API
         * @summary 툴팁 정보 삭제 처리 API
         * @param {string} tooltipId tooltipId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsingDELETE10(tooltipId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsingDELETE10(tooltipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 툴팁 목록 조회 API
         * @summary 툴팁 목록 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchListUsingGET1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TooltipOne>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchListUsingGET1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 툴팁 정보 조회 API
         * @summary 툴팁 정보 조회 API
         * @param {string} tooltipId tooltipId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneUsingGET4(tooltipId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TooltipOne>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchOneUsingGET4(tooltipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 툴팁 정보 확인 처리 API
         * @summary 툴팁 정보 확인 처리 API
         * @param {string} tooltipId tooltipId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUsingPUT(tooltipId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUsingPUT(tooltipId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TooltipApi - factory interface
 * @export
 */
export const TooltipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TooltipApiFp(configuration)
    return {
        /**
         * 툴팁 정보 삭제 처리 API
         * @summary 툴팁 정보 삭제 처리 API
         * @param {TooltipApiDeleteUsingDELETE10Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE10(requestParameters: TooltipApiDeleteUsingDELETE10Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.deleteUsingDELETE10(requestParameters.tooltipId, options).then((request) => request(axios, basePath));
        },
        /**
         * 툴팁 목록 조회 API
         * @summary 툴팁 목록 조회 API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchListUsingGET1(options?: AxiosRequestConfig): AxiosPromise<Array<TooltipOne>> {
            return localVarFp.fetchListUsingGET1(options).then((request) => request(axios, basePath));
        },
        /**
         * 툴팁 정보 조회 API
         * @summary 툴팁 정보 조회 API
         * @param {TooltipApiFetchOneUsingGET4Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUsingGET4(requestParameters: TooltipApiFetchOneUsingGET4Request, options?: AxiosRequestConfig): AxiosPromise<TooltipOne> {
            return localVarFp.fetchOneUsingGET4(requestParameters.tooltipId, options).then((request) => request(axios, basePath));
        },
        /**
         * 툴팁 정보 확인 처리 API
         * @summary 툴팁 정보 확인 처리 API
         * @param {TooltipApiPutUsingPUTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUsingPUT(requestParameters: TooltipApiPutUsingPUTRequest, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.putUsingPUT(requestParameters.tooltipId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUsingDELETE10 operation in TooltipApi.
 * @export
 * @interface TooltipApiDeleteUsingDELETE10Request
 */
export interface TooltipApiDeleteUsingDELETE10Request {
    /**
     * tooltipId
     * @type {string}
     * @memberof TooltipApiDeleteUsingDELETE10
     */
    readonly tooltipId: string
}

/**
 * Request parameters for fetchOneUsingGET4 operation in TooltipApi.
 * @export
 * @interface TooltipApiFetchOneUsingGET4Request
 */
export interface TooltipApiFetchOneUsingGET4Request {
    /**
     * tooltipId
     * @type {string}
     * @memberof TooltipApiFetchOneUsingGET4
     */
    readonly tooltipId: string
}

/**
 * Request parameters for putUsingPUT operation in TooltipApi.
 * @export
 * @interface TooltipApiPutUsingPUTRequest
 */
export interface TooltipApiPutUsingPUTRequest {
    /**
     * tooltipId
     * @type {string}
     * @memberof TooltipApiPutUsingPUT
     */
    readonly tooltipId: string
}

/**
 * TooltipApi - object-oriented interface
 * @export
 * @class TooltipApi
 * @extends {BaseAPI}
 */
export class TooltipApi extends BaseAPI {
    /**
     * 툴팁 정보 삭제 처리 API
     * @summary 툴팁 정보 삭제 처리 API
     * @param {TooltipApiDeleteUsingDELETE10Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TooltipApi
     */
    public deleteUsingDELETE10(requestParameters: TooltipApiDeleteUsingDELETE10Request, options?: AxiosRequestConfig) {
        return TooltipApiFp(this.configuration).deleteUsingDELETE10(requestParameters.tooltipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 툴팁 목록 조회 API
     * @summary 툴팁 목록 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TooltipApi
     */
    public fetchListUsingGET1(options?: AxiosRequestConfig) {
        return TooltipApiFp(this.configuration).fetchListUsingGET1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 툴팁 정보 조회 API
     * @summary 툴팁 정보 조회 API
     * @param {TooltipApiFetchOneUsingGET4Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TooltipApi
     */
    public fetchOneUsingGET4(requestParameters: TooltipApiFetchOneUsingGET4Request, options?: AxiosRequestConfig) {
        return TooltipApiFp(this.configuration).fetchOneUsingGET4(requestParameters.tooltipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 툴팁 정보 확인 처리 API
     * @summary 툴팁 정보 확인 처리 API
     * @param {TooltipApiPutUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TooltipApi
     */
    public putUsingPUT(requestParameters: TooltipApiPutUsingPUTRequest, options?: AxiosRequestConfig) {
        return TooltipApiFp(this.configuration).putUsingPUT(requestParameters.tooltipId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VerificationEmailApi - axios parameter creator
 * @export
 */
export const VerificationEmailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 이메일을 인증할 인증번호를 요청하는 API 입력 가능한 인증 유형: {\"JOIN\", \"CHANGE_EMAIL\", \"CHANGE_PASSWORD\"}
         * @summary 이메일 인증 번호 요청 API
         * @param {EmailVerificationNumberCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationNumberUsingPOST: async (command: EmailVerificationNumberCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('verificationNumberUsingPOST', 'command', command)
            const localVarPath = `/api/email-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 이메일로 전송 받은 인증번호를 입력하여, 이메일 인증을 완료하는 API
         * @summary 이메일 인증 요청 API
         * @param {EmailVerificationCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationUsingPUT: async (command: EmailVerificationCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('verificationUsingPUT', 'command', command)
            const localVarPath = `/api/email-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationEmailApi - functional programming interface
 * @export
 */
export const VerificationEmailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationEmailApiAxiosParamCreator(configuration)
    return {
        /**
         * 이메일을 인증할 인증번호를 요청하는 API 입력 가능한 인증 유형: {\"JOIN\", \"CHANGE_EMAIL\", \"CHANGE_PASSWORD\"}
         * @summary 이메일 인증 번호 요청 API
         * @param {EmailVerificationNumberCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verificationNumberUsingPOST(command: EmailVerificationNumberCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verificationNumberUsingPOST(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 이메일로 전송 받은 인증번호를 입력하여, 이메일 인증을 완료하는 API
         * @summary 이메일 인증 요청 API
         * @param {EmailVerificationCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verificationUsingPUT(command: EmailVerificationCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verificationUsingPUT(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerificationEmailApi - factory interface
 * @export
 */
export const VerificationEmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationEmailApiFp(configuration)
    return {
        /**
         * 이메일을 인증할 인증번호를 요청하는 API 입력 가능한 인증 유형: {\"JOIN\", \"CHANGE_EMAIL\", \"CHANGE_PASSWORD\"}
         * @summary 이메일 인증 번호 요청 API
         * @param {VerificationEmailApiVerificationNumberUsingPOSTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationNumberUsingPOST(requestParameters: VerificationEmailApiVerificationNumberUsingPOSTRequest, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.verificationNumberUsingPOST(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 이메일로 전송 받은 인증번호를 입력하여, 이메일 인증을 완료하는 API
         * @summary 이메일 인증 요청 API
         * @param {VerificationEmailApiVerificationUsingPUTRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationUsingPUT(requestParameters: VerificationEmailApiVerificationUsingPUTRequest, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.verificationUsingPUT(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for verificationNumberUsingPOST operation in VerificationEmailApi.
 * @export
 * @interface VerificationEmailApiVerificationNumberUsingPOSTRequest
 */
export interface VerificationEmailApiVerificationNumberUsingPOSTRequest {
    /**
     * command
     * @type {EmailVerificationNumberCommand}
     * @memberof VerificationEmailApiVerificationNumberUsingPOST
     */
    readonly command: EmailVerificationNumberCommand
}

/**
 * Request parameters for verificationUsingPUT operation in VerificationEmailApi.
 * @export
 * @interface VerificationEmailApiVerificationUsingPUTRequest
 */
export interface VerificationEmailApiVerificationUsingPUTRequest {
    /**
     * command
     * @type {EmailVerificationCommand}
     * @memberof VerificationEmailApiVerificationUsingPUT
     */
    readonly command: EmailVerificationCommand
}

/**
 * VerificationEmailApi - object-oriented interface
 * @export
 * @class VerificationEmailApi
 * @extends {BaseAPI}
 */
export class VerificationEmailApi extends BaseAPI {
    /**
     * 이메일을 인증할 인증번호를 요청하는 API 입력 가능한 인증 유형: {\"JOIN\", \"CHANGE_EMAIL\", \"CHANGE_PASSWORD\"}
     * @summary 이메일 인증 번호 요청 API
     * @param {VerificationEmailApiVerificationNumberUsingPOSTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationEmailApi
     */
    public verificationNumberUsingPOST(requestParameters: VerificationEmailApiVerificationNumberUsingPOSTRequest, options?: AxiosRequestConfig) {
        return VerificationEmailApiFp(this.configuration).verificationNumberUsingPOST(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 이메일로 전송 받은 인증번호를 입력하여, 이메일 인증을 완료하는 API
     * @summary 이메일 인증 요청 API
     * @param {VerificationEmailApiVerificationUsingPUTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationEmailApi
     */
    public verificationUsingPUT(requestParameters: VerificationEmailApiVerificationUsingPUTRequest, options?: AxiosRequestConfig) {
        return VerificationEmailApiFp(this.configuration).verificationUsingPUT(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VerificationPhoneApi - axios parameter creator
 * @export
 */
export const VerificationPhoneApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 휴대폰 번호를 인증할 인증번호를 요청하는 API 입력 가능한 인증 유형: {\"JOIN\", \"CHANGE_PHONE_NUMBER\"}
         * @summary 휴대폰 번호 인증 번호 요청 API
         * @param {PhoneVerificationNumberCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationNumberUsingPOST1: async (command: PhoneVerificationNumberCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('verificationNumberUsingPOST1', 'command', command)
            const localVarPath = `/api/phone-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 휴대폰으로 전송 받은 인증번호를 입력하여, 휴대폰 번호 인증을 완료하는 API
         * @summary 휴대폰 번호 인증 요청 API
         * @param {PhoneVerificationCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationUsingPUT1: async (command: PhoneVerificationCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'command' is not null or undefined
            assertParamExists('verificationUsingPUT1', 'command', command)
            const localVarPath = `/api/phone-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(command, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationPhoneApi - functional programming interface
 * @export
 */
export const VerificationPhoneApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationPhoneApiAxiosParamCreator(configuration)
    return {
        /**
         * 휴대폰 번호를 인증할 인증번호를 요청하는 API 입력 가능한 인증 유형: {\"JOIN\", \"CHANGE_PHONE_NUMBER\"}
         * @summary 휴대폰 번호 인증 번호 요청 API
         * @param {PhoneVerificationNumberCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verificationNumberUsingPOST1(command: PhoneVerificationNumberCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verificationNumberUsingPOST1(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 휴대폰으로 전송 받은 인증번호를 입력하여, 휴대폰 번호 인증을 완료하는 API
         * @summary 휴대폰 번호 인증 요청 API
         * @param {PhoneVerificationCommand} command command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verificationUsingPUT1(command: PhoneVerificationCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verificationUsingPUT1(command, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerificationPhoneApi - factory interface
 * @export
 */
export const VerificationPhoneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationPhoneApiFp(configuration)
    return {
        /**
         * 휴대폰 번호를 인증할 인증번호를 요청하는 API 입력 가능한 인증 유형: {\"JOIN\", \"CHANGE_PHONE_NUMBER\"}
         * @summary 휴대폰 번호 인증 번호 요청 API
         * @param {VerificationPhoneApiVerificationNumberUsingPOST1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationNumberUsingPOST1(requestParameters: VerificationPhoneApiVerificationNumberUsingPOST1Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.verificationNumberUsingPOST1(requestParameters.command, options).then((request) => request(axios, basePath));
        },
        /**
         * 휴대폰으로 전송 받은 인증번호를 입력하여, 휴대폰 번호 인증을 완료하는 API
         * @summary 휴대폰 번호 인증 요청 API
         * @param {VerificationPhoneApiVerificationUsingPUT1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationUsingPUT1(requestParameters: VerificationPhoneApiVerificationUsingPUT1Request, options?: AxiosRequestConfig): AxiosPromise<ApiRes> {
            return localVarFp.verificationUsingPUT1(requestParameters.command, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for verificationNumberUsingPOST1 operation in VerificationPhoneApi.
 * @export
 * @interface VerificationPhoneApiVerificationNumberUsingPOST1Request
 */
export interface VerificationPhoneApiVerificationNumberUsingPOST1Request {
    /**
     * command
     * @type {PhoneVerificationNumberCommand}
     * @memberof VerificationPhoneApiVerificationNumberUsingPOST1
     */
    readonly command: PhoneVerificationNumberCommand
}

/**
 * Request parameters for verificationUsingPUT1 operation in VerificationPhoneApi.
 * @export
 * @interface VerificationPhoneApiVerificationUsingPUT1Request
 */
export interface VerificationPhoneApiVerificationUsingPUT1Request {
    /**
     * command
     * @type {PhoneVerificationCommand}
     * @memberof VerificationPhoneApiVerificationUsingPUT1
     */
    readonly command: PhoneVerificationCommand
}

/**
 * VerificationPhoneApi - object-oriented interface
 * @export
 * @class VerificationPhoneApi
 * @extends {BaseAPI}
 */
export class VerificationPhoneApi extends BaseAPI {
    /**
     * 휴대폰 번호를 인증할 인증번호를 요청하는 API 입력 가능한 인증 유형: {\"JOIN\", \"CHANGE_PHONE_NUMBER\"}
     * @summary 휴대폰 번호 인증 번호 요청 API
     * @param {VerificationPhoneApiVerificationNumberUsingPOST1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationPhoneApi
     */
    public verificationNumberUsingPOST1(requestParameters: VerificationPhoneApiVerificationNumberUsingPOST1Request, options?: AxiosRequestConfig) {
        return VerificationPhoneApiFp(this.configuration).verificationNumberUsingPOST1(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 휴대폰으로 전송 받은 인증번호를 입력하여, 휴대폰 번호 인증을 완료하는 API
     * @summary 휴대폰 번호 인증 요청 API
     * @param {VerificationPhoneApiVerificationUsingPUT1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationPhoneApi
     */
    public verificationUsingPUT1(requestParameters: VerificationPhoneApiVerificationUsingPUT1Request, options?: AxiosRequestConfig) {
        return VerificationPhoneApiFp(this.configuration).verificationUsingPUT1(requestParameters.command, options).then((request) => request(this.axios, this.basePath));
    }
}


